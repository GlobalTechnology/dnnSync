'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="dnn_dev")>  _
Partial Public Class AgapeConnectDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertUserProfile(instance As UserProfile)
    End Sub
  Partial Private Sub UpdateUserProfile(instance As UserProfile)
    End Sub
  Partial Private Sub DeleteUserProfile(instance As UserProfile)
    End Sub
  Partial Private Sub InsertProfilePropertyDefinition(instance As ProfilePropertyDefinition)
    End Sub
  Partial Private Sub UpdateProfilePropertyDefinition(instance As ProfilePropertyDefinition)
    End Sub
  Partial Private Sub DeleteProfilePropertyDefinition(instance As ProfilePropertyDefinition)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_Setting(instance As AP_StaffBroker_Setting)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_Setting(instance As AP_StaffBroker_Setting)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_Setting(instance As AP_StaffBroker_Setting)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_Staff(instance As AP_StaffBroker_Staff)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_Staff(instance As AP_StaffBroker_Staff)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_Staff(instance As AP_StaffBroker_Staff)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_StaffProfile(instance As AP_StaffBroker_StaffProfile)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_StaffProfile(instance As AP_StaffBroker_StaffProfile)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_StaffProfile(instance As AP_StaffBroker_StaffProfile)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_StaffPropertyDefinition(instance As AP_StaffBroker_StaffPropertyDefinition)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_StaffPropertyDefinition(instance As AP_StaffBroker_StaffPropertyDefinition)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_StaffPropertyDefinition(instance As AP_StaffBroker_StaffPropertyDefinition)
    End Sub
  Partial Private Sub InsertAP_StaffBroker_StaffType(instance As AP_StaffBroker_StaffType)
    End Sub
  Partial Private Sub UpdateAP_StaffBroker_StaffType(instance As AP_StaffBroker_StaffType)
    End Sub
  Partial Private Sub DeleteAP_StaffBroker_StaffType(instance As AP_StaffBroker_StaffType)
    End Sub
  Partial Private Sub InsertAP_mpd_Country(instance As AP_mpd_Country)
    End Sub
  Partial Private Sub UpdateAP_mpd_Country(instance As AP_mpd_Country)
    End Sub
  Partial Private Sub DeleteAP_mpd_Country(instance As AP_mpd_Country)
    End Sub
  Partial Private Sub InsertAp_mpd_User(instance As Ap_mpd_User)
    End Sub
  Partial Private Sub UpdateAp_mpd_User(instance As Ap_mpd_User)
    End Sub
  Partial Private Sub DeleteAp_mpd_User(instance As Ap_mpd_User)
    End Sub
  Partial Private Sub InsertAP_mpdCalc_StaffBudget(instance As AP_mpdCalc_StaffBudget)
    End Sub
  Partial Private Sub UpdateAP_mpdCalc_StaffBudget(instance As AP_mpdCalc_StaffBudget)
    End Sub
  Partial Private Sub DeleteAP_mpdCalc_StaffBudget(instance As AP_mpdCalc_StaffBudget)
    End Sub
  Partial Private Sub InsertAP_mpdCalc_Definition(instance As AP_mpdCalc_Definition)
    End Sub
  Partial Private Sub UpdateAP_mpdCalc_Definition(instance As AP_mpdCalc_Definition)
    End Sub
  Partial Private Sub DeleteAP_mpdCalc_Definition(instance As AP_mpdCalc_Definition)
    End Sub
  Partial Private Sub Insertministry_system(instance As ministry_system)
    End Sub
  Partial Private Sub Updateministry_system(instance As ministry_system)
    End Sub
  Partial Private Sub Deleteministry_system(instance As ministry_system)
    End Sub
  Partial Private Sub Insertgr_mapping(instance As gr_mapping)
    End Sub
  Partial Private Sub Updategr_mapping(instance As gr_mapping)
    End Sub
  Partial Private Sub Deletegr_mapping(instance As gr_mapping)
    End Sub
  Partial Private Sub InsertAP_mpd_UserAccountInfo(instance As AP_mpd_UserAccountInfo)
    End Sub
  Partial Private Sub UpdateAP_mpd_UserAccountInfo(instance As AP_mpd_UserAccountInfo)
    End Sub
  Partial Private Sub DeleteAP_mpd_UserAccountInfo(instance As AP_mpd_UserAccountInfo)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.dnnSync.My.MySettings.Default.AgapeConnectConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property UserProfiles() As System.Data.Linq.Table(Of UserProfile)
		Get
			Return Me.GetTable(Of UserProfile)
		End Get
	End Property
	
	Public ReadOnly Property ProfilePropertyDefinitions() As System.Data.Linq.Table(Of ProfilePropertyDefinition)
		Get
			Return Me.GetTable(Of ProfilePropertyDefinition)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_Settings() As System.Data.Linq.Table(Of AP_StaffBroker_Setting)
		Get
			Return Me.GetTable(Of AP_StaffBroker_Setting)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_Staffs() As System.Data.Linq.Table(Of AP_StaffBroker_Staff)
		Get
			Return Me.GetTable(Of AP_StaffBroker_Staff)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_StaffProfiles() As System.Data.Linq.Table(Of AP_StaffBroker_StaffProfile)
		Get
			Return Me.GetTable(Of AP_StaffBroker_StaffProfile)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_StaffPropertyDefinitions() As System.Data.Linq.Table(Of AP_StaffBroker_StaffPropertyDefinition)
		Get
			Return Me.GetTable(Of AP_StaffBroker_StaffPropertyDefinition)
		End Get
	End Property
	
	Public ReadOnly Property AP_StaffBroker_StaffTypes() As System.Data.Linq.Table(Of AP_StaffBroker_StaffType)
		Get
			Return Me.GetTable(Of AP_StaffBroker_StaffType)
		End Get
	End Property
	
	Public ReadOnly Property AP_mpd_Countries() As System.Data.Linq.Table(Of AP_mpd_Country)
		Get
			Return Me.GetTable(Of AP_mpd_Country)
		End Get
	End Property
	
	Public ReadOnly Property Ap_mpd_Users() As System.Data.Linq.Table(Of Ap_mpd_User)
		Get
			Return Me.GetTable(Of Ap_mpd_User)
		End Get
	End Property
	
	Public ReadOnly Property AP_mpdCalc_StaffBudgets() As System.Data.Linq.Table(Of AP_mpdCalc_StaffBudget)
		Get
			Return Me.GetTable(Of AP_mpdCalc_StaffBudget)
		End Get
	End Property
	
	Public ReadOnly Property AP_mpdCalc_Definitions() As System.Data.Linq.Table(Of AP_mpdCalc_Definition)
		Get
			Return Me.GetTable(Of AP_mpdCalc_Definition)
		End Get
	End Property
	
	Public ReadOnly Property ministry_systems() As System.Data.Linq.Table(Of ministry_system)
		Get
			Return Me.GetTable(Of ministry_system)
		End Get
	End Property
	
	Public ReadOnly Property gr_mappings() As System.Data.Linq.Table(Of gr_mapping)
		Get
			Return Me.GetTable(Of gr_mapping)
		End Get
	End Property
	
	Public ReadOnly Property AP_mpd_UserAccountInfos() As System.Data.Linq.Table(Of AP_mpd_UserAccountInfo)
		Get
			Return Me.GetTable(Of AP_mpd_UserAccountInfo)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _Username As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _IsSuperUser As Boolean
	
	Private _AffiliateId As System.Nullable(Of Integer)
	
	Private _Email As String
	
	Private _DisplayName As String
	
	Private _UpdatePassword As Boolean
	
	Private _LastIPAddress As String
	
	Private _IsDeleted As Boolean
	
	Private _CreatedByUserID As System.Nullable(Of Integer)
	
	Private _CreatedOnDate As System.Nullable(Of Date)
	
	Private _LastModifiedByUserID As System.Nullable(Of Integer)
	
	Private _LastModifiedOnDate As System.Nullable(Of Date)
	
	Private _UserProfiles As EntitySet(Of UserProfile)
	
	Private _AP_StaffBroker_Staffs As EntityRef(Of AP_StaffBroker_Staff)
	
	Private _AP_StaffBroker_Staffs1 As EntityRef(Of AP_StaffBroker_Staff)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnIsSuperUserChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsSuperUserChanged()
    End Sub
    Partial Private Sub OnAffiliateIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAffiliateIdChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnUpdatePasswordChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUpdatePasswordChanged()
    End Sub
    Partial Private Sub OnLastIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnLastIPAddressChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCreatedByUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCreatedByUserIDChanged()
    End Sub
    Partial Private Sub OnCreatedOnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedOnDateChanged()
    End Sub
    Partial Private Sub OnLastModifiedByUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLastModifiedByUserIDChanged()
    End Sub
    Partial Private Sub OnLastModifiedOnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedOnDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserProfiles = New EntitySet(Of UserProfile)(AddressOf Me.attach_UserProfiles, AddressOf Me.detach_UserProfiles)
		Me._AP_StaffBroker_Staffs = CType(Nothing, EntityRef(Of AP_StaffBroker_Staff))
		Me._AP_StaffBroker_Staffs1 = CType(Nothing, EntityRef(Of AP_StaffBroker_Staff))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsSuperUser", DbType:="Bit NOT NULL")>  _
	Public Property IsSuperUser() As Boolean
		Get
			Return Me._IsSuperUser
		End Get
		Set
			If ((Me._IsSuperUser = value)  _
						= false) Then
				Me.OnIsSuperUserChanging(value)
				Me.SendPropertyChanging
				Me._IsSuperUser = value
				Me.SendPropertyChanged("IsSuperUser")
				Me.OnIsSuperUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AffiliateId", DbType:="Int")>  _
	Public Property AffiliateId() As System.Nullable(Of Integer)
		Get
			Return Me._AffiliateId
		End Get
		Set
			If (Me._AffiliateId.Equals(value) = false) Then
				Me.OnAffiliateIdChanging(value)
				Me.SendPropertyChanging
				Me._AffiliateId = value
				Me.SendPropertyChanged("AffiliateId")
				Me.OnAffiliateIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property DisplayName() As String
		Get
			Return Me._DisplayName
		End Get
		Set
			If (String.Equals(Me._DisplayName, value) = false) Then
				Me.OnDisplayNameChanging(value)
				Me.SendPropertyChanging
				Me._DisplayName = value
				Me.SendPropertyChanged("DisplayName")
				Me.OnDisplayNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatePassword", DbType:="Bit NOT NULL")>  _
	Public Property UpdatePassword() As Boolean
		Get
			Return Me._UpdatePassword
		End Get
		Set
			If ((Me._UpdatePassword = value)  _
						= false) Then
				Me.OnUpdatePasswordChanging(value)
				Me.SendPropertyChanging
				Me._UpdatePassword = value
				Me.SendPropertyChanged("UpdatePassword")
				Me.OnUpdatePasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastIPAddress", DbType:="NVarChar(50)")>  _
	Public Property LastIPAddress() As String
		Get
			Return Me._LastIPAddress
		End Get
		Set
			If (String.Equals(Me._LastIPAddress, value) = false) Then
				Me.OnLastIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._LastIPAddress = value
				Me.SendPropertyChanged("LastIPAddress")
				Me.OnLastIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit NOT NULL")>  _
	Public Property IsDeleted() As Boolean
		Get
			Return Me._IsDeleted
		End Get
		Set
			If ((Me._IsDeleted = value)  _
						= false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByUserID", DbType:="Int")>  _
	Public Property CreatedByUserID() As System.Nullable(Of Integer)
		Get
			Return Me._CreatedByUserID
		End Get
		Set
			If (Me._CreatedByUserID.Equals(value) = false) Then
				Me.OnCreatedByUserIDChanging(value)
				Me.SendPropertyChanging
				Me._CreatedByUserID = value
				Me.SendPropertyChanged("CreatedByUserID")
				Me.OnCreatedByUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedOnDate", DbType:="DateTime")>  _
	Public Property CreatedOnDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedOnDate
		End Get
		Set
			If (Me._CreatedOnDate.Equals(value) = false) Then
				Me.OnCreatedOnDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedOnDate = value
				Me.SendPropertyChanged("CreatedOnDate")
				Me.OnCreatedOnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedByUserID", DbType:="Int")>  _
	Public Property LastModifiedByUserID() As System.Nullable(Of Integer)
		Get
			Return Me._LastModifiedByUserID
		End Get
		Set
			If (Me._LastModifiedByUserID.Equals(value) = false) Then
				Me.OnLastModifiedByUserIDChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedByUserID = value
				Me.SendPropertyChanged("LastModifiedByUserID")
				Me.OnLastModifiedByUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedOnDate", DbType:="DateTime")>  _
	Public Property LastModifiedOnDate() As System.Nullable(Of Date)
		Get
			Return Me._LastModifiedOnDate
		End Get
		Set
			If (Me._LastModifiedOnDate.Equals(value) = false) Then
				Me.OnLastModifiedOnDateChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedOnDate = value
				Me.SendPropertyChanged("LastModifiedOnDate")
				Me.OnLastModifiedOnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UserProfile", Storage:="_UserProfiles", ThisKey:="UserID", OtherKey:="UserID")>  _
	Public Property UserProfiles() As EntitySet(Of UserProfile)
		Get
			Return Me._UserProfiles
		End Get
		Set
			Me._UserProfiles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_AP_StaffBroker_Staff", Storage:="_AP_StaffBroker_Staffs", ThisKey:="UserID", OtherKey:="UserId1", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property AP_StaffBroker_Staffs() As AP_StaffBroker_Staff
		Get
			Return Me._AP_StaffBroker_Staffs.Entity
		End Get
		Set
			Dim previousValue As AP_StaffBroker_Staff = Me._AP_StaffBroker_Staffs.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_StaffBroker_Staffs.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_StaffBroker_Staffs.Entity = Nothing
					previousValue.User = Nothing
				End If
				Me._AP_StaffBroker_Staffs.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.User = Me
				End If
				Me.SendPropertyChanged("AP_StaffBroker_Staffs")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_AP_StaffBroker_Staff1", Storage:="_AP_StaffBroker_Staffs1", ThisKey:="UserID", OtherKey:="UserId2", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property AP_StaffBroker_Staffs1() As AP_StaffBroker_Staff
		Get
			Return Me._AP_StaffBroker_Staffs1.Entity
		End Get
		Set
			Dim previousValue As AP_StaffBroker_Staff = Me._AP_StaffBroker_Staffs1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_StaffBroker_Staffs1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_StaffBroker_Staffs1.Entity = Nothing
					previousValue.User1 = Nothing
				End If
				Me._AP_StaffBroker_Staffs1.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.User1 = Me
				End If
				Me.SendPropertyChanged("AP_StaffBroker_Staffs1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserProfiles(ByVal entity As UserProfile)
		Me.SendPropertyChanging
		entity.User = Me
	End Sub
	
	Private Sub detach_UserProfiles(ByVal entity As UserProfile)
		Me.SendPropertyChanging
		entity.User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserProfile")>  _
Partial Public Class UserProfile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProfileID As Integer
	
	Private _UserID As Integer
	
	Private _PropertyDefinitionID As Integer
	
	Private _PropertyValue As String
	
	Private _PropertyText As String
	
	Private _Visibility As Integer
	
	Private _LastUpdatedDate As Date
	
	Private _ExtendedVisibility As String
	
	Private _User As EntityRef(Of User)
	
	Private _ProfilePropertyDefinition As EntityRef(Of ProfilePropertyDefinition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProfileIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProfileIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnPropertyDefinitionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPropertyDefinitionIDChanged()
    End Sub
    Partial Private Sub OnPropertyValueChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValueChanged()
    End Sub
    Partial Private Sub OnPropertyTextChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyTextChanged()
    End Sub
    Partial Private Sub OnVisibilityChanging(value As Integer)
    End Sub
    Partial Private Sub OnVisibilityChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
    Partial Private Sub OnExtendedVisibilityChanging(value As String)
    End Sub
    Partial Private Sub OnExtendedVisibilityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._User = CType(Nothing, EntityRef(Of User))
		Me._ProfilePropertyDefinition = CType(Nothing, EntityRef(Of ProfilePropertyDefinition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProfileID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProfileID() As Integer
		Get
			Return Me._ProfileID
		End Get
		Set
			If ((Me._ProfileID = value)  _
						= false) Then
				Me.OnProfileIDChanging(value)
				Me.SendPropertyChanging
				Me._ProfileID = value
				Me.SendPropertyChanged("ProfileID")
				Me.OnProfileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyDefinitionID", DbType:="Int NOT NULL")>  _
	Public Property PropertyDefinitionID() As Integer
		Get
			Return Me._PropertyDefinitionID
		End Get
		Set
			If ((Me._PropertyDefinitionID = value)  _
						= false) Then
				If Me._ProfilePropertyDefinition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPropertyDefinitionIDChanging(value)
				Me.SendPropertyChanging
				Me._PropertyDefinitionID = value
				Me.SendPropertyChanged("PropertyDefinitionID")
				Me.OnPropertyDefinitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValue", DbType:="NVarChar(3750)")>  _
	Public Property PropertyValue() As String
		Get
			Return Me._PropertyValue
		End Get
		Set
			If (String.Equals(Me._PropertyValue, value) = false) Then
				Me.OnPropertyValueChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValue = value
				Me.SendPropertyChanged("PropertyValue")
				Me.OnPropertyValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyText", DbType:="NVarChar(MAX)")>  _
	Public Property PropertyText() As String
		Get
			Return Me._PropertyText
		End Get
		Set
			If (String.Equals(Me._PropertyText, value) = false) Then
				Me.OnPropertyTextChanging(value)
				Me.SendPropertyChanging
				Me._PropertyText = value
				Me.SendPropertyChanged("PropertyText")
				Me.OnPropertyTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visibility", DbType:="Int NOT NULL")>  _
	Public Property Visibility() As Integer
		Get
			Return Me._Visibility
		End Get
		Set
			If ((Me._Visibility = value)  _
						= false) Then
				Me.OnVisibilityChanging(value)
				Me.SendPropertyChanging
				Me._Visibility = value
				Me.SendPropertyChanged("Visibility")
				Me.OnVisibilityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDate() As Date
		Get
			Return Me._LastUpdatedDate
		End Get
		Set
			If ((Me._LastUpdatedDate = value)  _
						= false) Then
				Me.OnLastUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDate = value
				Me.SendPropertyChanged("LastUpdatedDate")
				Me.OnLastUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExtendedVisibility", DbType:="VarChar(400)")>  _
	Public Property ExtendedVisibility() As String
		Get
			Return Me._ExtendedVisibility
		End Get
		Set
			If (String.Equals(Me._ExtendedVisibility, value) = false) Then
				Me.OnExtendedVisibilityChanging(value)
				Me.SendPropertyChanging
				Me._ExtendedVisibility = value
				Me.SendPropertyChanged("ExtendedVisibility")
				Me.OnExtendedVisibilityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UserProfile", Storage:="_User", ThisKey:="UserID", OtherKey:="UserID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.UserProfiles.Remove(Me)
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserProfiles.Add(Me)
					Me._UserID = value.UserID
				Else
					Me._UserID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProfilePropertyDefinition_UserProfile", Storage:="_ProfilePropertyDefinition", ThisKey:="PropertyDefinitionID", OtherKey:="PropertyDefinitionID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property ProfilePropertyDefinition() As ProfilePropertyDefinition
		Get
			Return Me._ProfilePropertyDefinition.Entity
		End Get
		Set
			Dim previousValue As ProfilePropertyDefinition = Me._ProfilePropertyDefinition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProfilePropertyDefinition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProfilePropertyDefinition.Entity = Nothing
					previousValue.UserProfiles.Remove(Me)
				End If
				Me._ProfilePropertyDefinition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserProfiles.Add(Me)
					Me._PropertyDefinitionID = value.PropertyDefinitionID
				Else
					Me._PropertyDefinitionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProfilePropertyDefinition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProfilePropertyDefinition")>  _
Partial Public Class ProfilePropertyDefinition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PropertyDefinitionID As Integer
	
	Private _PortalID As System.Nullable(Of Integer)
	
	Private _ModuleDefID As System.Nullable(Of Integer)
	
	Private _Deleted As Boolean
	
	Private _DataType As Integer
	
	Private _DefaultValue As String
	
	Private _PropertyCategory As String
	
	Private _PropertyName As String
	
	Private _Length As Integer
	
	Private _Required As Boolean
	
	Private _ValidationExpression As String
	
	Private _ViewOrder As Integer
	
	Private _Visible As Boolean
	
	Private _CreatedByUserID As System.Nullable(Of Integer)
	
	Private _CreatedOnDate As System.Nullable(Of Date)
	
	Private _LastModifiedByUserID As System.Nullable(Of Integer)
	
	Private _LastModifiedOnDate As System.Nullable(Of Date)
	
	Private _DefaultVisibility As System.Nullable(Of Integer)
	
	Private _ReadOnly As Boolean
	
	Private _UserProfiles As EntitySet(Of UserProfile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPropertyDefinitionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPropertyDefinitionIDChanged()
    End Sub
    Partial Private Sub OnPortalIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIDChanged()
    End Sub
    Partial Private Sub OnModuleDefIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModuleDefIDChanged()
    End Sub
    Partial Private Sub OnDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDeletedChanged()
    End Sub
    Partial Private Sub OnDataTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataTypeChanged()
    End Sub
    Partial Private Sub OnDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultValueChanged()
    End Sub
    Partial Private Sub OnPropertyCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyCategoryChanged()
    End Sub
    Partial Private Sub OnPropertyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNameChanged()
    End Sub
    Partial Private Sub OnLengthChanging(value As Integer)
    End Sub
    Partial Private Sub OnLengthChanged()
    End Sub
    Partial Private Sub OnRequiredChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRequiredChanged()
    End Sub
    Partial Private Sub OnValidationExpressionChanging(value As String)
    End Sub
    Partial Private Sub OnValidationExpressionChanged()
    End Sub
    Partial Private Sub OnViewOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnViewOrderChanged()
    End Sub
    Partial Private Sub OnVisibleChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVisibleChanged()
    End Sub
    Partial Private Sub OnCreatedByUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCreatedByUserIDChanged()
    End Sub
    Partial Private Sub OnCreatedOnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedOnDateChanged()
    End Sub
    Partial Private Sub OnLastModifiedByUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLastModifiedByUserIDChanged()
    End Sub
    Partial Private Sub OnLastModifiedOnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedOnDateChanged()
    End Sub
    Partial Private Sub OnDefaultVisibilityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDefaultVisibilityChanged()
    End Sub
    Partial Private Sub OnReadOnlyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnReadOnlyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserProfiles = New EntitySet(Of UserProfile)(AddressOf Me.attach_UserProfiles, AddressOf Me.detach_UserProfiles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyDefinitionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PropertyDefinitionID() As Integer
		Get
			Return Me._PropertyDefinitionID
		End Get
		Set
			If ((Me._PropertyDefinitionID = value)  _
						= false) Then
				Me.OnPropertyDefinitionIDChanging(value)
				Me.SendPropertyChanging
				Me._PropertyDefinitionID = value
				Me.SendPropertyChanged("PropertyDefinitionID")
				Me.OnPropertyDefinitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalID", DbType:="Int")>  _
	Public Property PortalID() As System.Nullable(Of Integer)
		Get
			Return Me._PortalID
		End Get
		Set
			If (Me._PortalID.Equals(value) = false) Then
				Me.OnPortalIDChanging(value)
				Me.SendPropertyChanging
				Me._PortalID = value
				Me.SendPropertyChanged("PortalID")
				Me.OnPortalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDefID", DbType:="Int")>  _
	Public Property ModuleDefID() As System.Nullable(Of Integer)
		Get
			Return Me._ModuleDefID
		End Get
		Set
			If (Me._ModuleDefID.Equals(value) = false) Then
				Me.OnModuleDefIDChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDefID = value
				Me.SendPropertyChanged("ModuleDefID")
				Me.OnModuleDefIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deleted", DbType:="Bit NOT NULL")>  _
	Public Property Deleted() As Boolean
		Get
			Return Me._Deleted
		End Get
		Set
			If ((Me._Deleted = value)  _
						= false) Then
				Me.OnDeletedChanging(value)
				Me.SendPropertyChanging
				Me._Deleted = value
				Me.SendPropertyChanged("Deleted")
				Me.OnDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataType", DbType:="Int NOT NULL")>  _
	Public Property DataType() As Integer
		Get
			Return Me._DataType
		End Get
		Set
			If ((Me._DataType = value)  _
						= false) Then
				Me.OnDataTypeChanging(value)
				Me.SendPropertyChanging
				Me._DataType = value
				Me.SendPropertyChanged("DataType")
				Me.OnDataTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultValue", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DefaultValue() As String
		Get
			Return Me._DefaultValue
		End Get
		Set
			If (String.Equals(Me._DefaultValue, value) = false) Then
				Me.OnDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._DefaultValue = value
				Me.SendPropertyChanged("DefaultValue")
				Me.OnDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyCategory", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PropertyCategory() As String
		Get
			Return Me._PropertyCategory
		End Get
		Set
			If (String.Equals(Me._PropertyCategory, value) = false) Then
				Me.OnPropertyCategoryChanging(value)
				Me.SendPropertyChanging
				Me._PropertyCategory = value
				Me.SendPropertyChanged("PropertyCategory")
				Me.OnPropertyCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PropertyName() As String
		Get
			Return Me._PropertyName
		End Get
		Set
			If (String.Equals(Me._PropertyName, value) = false) Then
				Me.OnPropertyNameChanging(value)
				Me.SendPropertyChanging
				Me._PropertyName = value
				Me.SendPropertyChanged("PropertyName")
				Me.OnPropertyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Length", DbType:="Int NOT NULL")>  _
	Public Property Length() As Integer
		Get
			Return Me._Length
		End Get
		Set
			If ((Me._Length = value)  _
						= false) Then
				Me.OnLengthChanging(value)
				Me.SendPropertyChanging
				Me._Length = value
				Me.SendPropertyChanged("Length")
				Me.OnLengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Required", DbType:="Bit NOT NULL")>  _
	Public Property Required() As Boolean
		Get
			Return Me._Required
		End Get
		Set
			If ((Me._Required = value)  _
						= false) Then
				Me.OnRequiredChanging(value)
				Me.SendPropertyChanging
				Me._Required = value
				Me.SendPropertyChanged("Required")
				Me.OnRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidationExpression", DbType:="NVarChar(2000)")>  _
	Public Property ValidationExpression() As String
		Get
			Return Me._ValidationExpression
		End Get
		Set
			If (String.Equals(Me._ValidationExpression, value) = false) Then
				Me.OnValidationExpressionChanging(value)
				Me.SendPropertyChanging
				Me._ValidationExpression = value
				Me.SendPropertyChanged("ValidationExpression")
				Me.OnValidationExpressionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewOrder", DbType:="Int NOT NULL")>  _
	Public Property ViewOrder() As Integer
		Get
			Return Me._ViewOrder
		End Get
		Set
			If ((Me._ViewOrder = value)  _
						= false) Then
				Me.OnViewOrderChanging(value)
				Me.SendPropertyChanging
				Me._ViewOrder = value
				Me.SendPropertyChanged("ViewOrder")
				Me.OnViewOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visible", DbType:="Bit NOT NULL")>  _
	Public Property Visible() As Boolean
		Get
			Return Me._Visible
		End Get
		Set
			If ((Me._Visible = value)  _
						= false) Then
				Me.OnVisibleChanging(value)
				Me.SendPropertyChanging
				Me._Visible = value
				Me.SendPropertyChanged("Visible")
				Me.OnVisibleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedByUserID", DbType:="Int")>  _
	Public Property CreatedByUserID() As System.Nullable(Of Integer)
		Get
			Return Me._CreatedByUserID
		End Get
		Set
			If (Me._CreatedByUserID.Equals(value) = false) Then
				Me.OnCreatedByUserIDChanging(value)
				Me.SendPropertyChanging
				Me._CreatedByUserID = value
				Me.SendPropertyChanged("CreatedByUserID")
				Me.OnCreatedByUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedOnDate", DbType:="DateTime")>  _
	Public Property CreatedOnDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedOnDate
		End Get
		Set
			If (Me._CreatedOnDate.Equals(value) = false) Then
				Me.OnCreatedOnDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedOnDate = value
				Me.SendPropertyChanged("CreatedOnDate")
				Me.OnCreatedOnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedByUserID", DbType:="Int")>  _
	Public Property LastModifiedByUserID() As System.Nullable(Of Integer)
		Get
			Return Me._LastModifiedByUserID
		End Get
		Set
			If (Me._LastModifiedByUserID.Equals(value) = false) Then
				Me.OnLastModifiedByUserIDChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedByUserID = value
				Me.SendPropertyChanged("LastModifiedByUserID")
				Me.OnLastModifiedByUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedOnDate", DbType:="DateTime")>  _
	Public Property LastModifiedOnDate() As System.Nullable(Of Date)
		Get
			Return Me._LastModifiedOnDate
		End Get
		Set
			If (Me._LastModifiedOnDate.Equals(value) = false) Then
				Me.OnLastModifiedOnDateChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedOnDate = value
				Me.SendPropertyChanged("LastModifiedOnDate")
				Me.OnLastModifiedOnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultVisibility", DbType:="Int")>  _
	Public Property DefaultVisibility() As System.Nullable(Of Integer)
		Get
			Return Me._DefaultVisibility
		End Get
		Set
			If (Me._DefaultVisibility.Equals(value) = false) Then
				Me.OnDefaultVisibilityChanging(value)
				Me.SendPropertyChanging
				Me._DefaultVisibility = value
				Me.SendPropertyChanged("DefaultVisibility")
				Me.OnDefaultVisibilityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="ReadOnly", Storage:="_ReadOnly", DbType:="Bit NOT NULL")>  _
	Public Property [ReadOnly]() As Boolean
		Get
			Return Me._ReadOnly
		End Get
		Set
			If ((Me._ReadOnly = value)  _
						= false) Then
				Me.OnReadOnlyChanging(value)
				Me.SendPropertyChanging
				Me._ReadOnly = value
				Me.SendPropertyChanged("[ReadOnly]")
				Me.OnReadOnlyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProfilePropertyDefinition_UserProfile", Storage:="_UserProfiles", ThisKey:="PropertyDefinitionID", OtherKey:="PropertyDefinitionID")>  _
	Public Property UserProfiles() As EntitySet(Of UserProfile)
		Get
			Return Me._UserProfiles
		End Get
		Set
			Me._UserProfiles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserProfiles(ByVal entity As UserProfile)
		Me.SendPropertyChanging
		entity.ProfilePropertyDefinition = Me
	End Sub
	
	Private Sub detach_UserProfiles(ByVal entity As UserProfile)
		Me.SendPropertyChanging
		entity.ProfilePropertyDefinition = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_Settings")>  _
Partial Public Class AP_StaffBroker_Setting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SettingId As Integer
	
	Private _SettingName As String
	
	Private _SettingValue As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSettingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSettingIdChanged()
    End Sub
    Partial Private Sub OnSettingNameChanging(value As String)
    End Sub
    Partial Private Sub OnSettingNameChanged()
    End Sub
    Partial Private Sub OnSettingValueChanging(value As String)
    End Sub
    Partial Private Sub OnSettingValueChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SettingId() As Integer
		Get
			Return Me._SettingId
		End Get
		Set
			If ((Me._SettingId = value)  _
						= false) Then
				Me.OnSettingIdChanging(value)
				Me.SendPropertyChanging
				Me._SettingId = value
				Me.SendPropertyChanged("SettingId")
				Me.OnSettingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingName", DbType:="NVarChar(50)")>  _
	Public Property SettingName() As String
		Get
			Return Me._SettingName
		End Get
		Set
			If (String.Equals(Me._SettingName, value) = false) Then
				Me.OnSettingNameChanging(value)
				Me.SendPropertyChanging
				Me._SettingName = value
				Me.SendPropertyChanged("SettingName")
				Me.OnSettingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingValue", DbType:="NVarChar(MAX)")>  _
	Public Property SettingValue() As String
		Get
			Return Me._SettingValue
		End Get
		Set
			If (String.Equals(Me._SettingValue, value) = false) Then
				Me.OnSettingValueChanging(value)
				Me.SendPropertyChanging
				Me._SettingValue = value
				Me.SendPropertyChanged("SettingValue")
				Me.OnSettingValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_Staff")>  _
Partial Public Class AP_StaffBroker_Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StaffId As Integer
	
	Private _DisplayName As String
	
	Private _CostCenter As String
	
	Private _StaffTypeId As System.Nullable(Of Short)
	
	Private _UserId1 As Integer
	
	Private _UserId2 As System.Nullable(Of Integer)
	
	Private _Active As Boolean
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _last_updated As Date
	
	Private _AP_StaffBroker_StaffProfiles As EntitySet(Of AP_StaffBroker_StaffProfile)
	
	Private _User As EntityRef(Of User)
	
	Private _User1 As EntityRef(Of User)
	
	Private _AP_StaffBroker_StaffType As EntityRef(Of AP_StaffBroker_StaffType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnCostCenterChanging(value As String)
    End Sub
    Partial Private Sub OnCostCenterChanged()
    End Sub
    Partial Private Sub OnStaffTypeIdChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnStaffTypeIdChanged()
    End Sub
    Partial Private Sub OnUserId1Changing(value As Integer)
    End Sub
    Partial Private Sub OnUserId1Changed()
    End Sub
    Partial Private Sub OnUserId2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserId2Changed()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub Onlast_updatedChanging(value As Date)
    End Sub
    Partial Private Sub Onlast_updatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_StaffBroker_StaffProfiles = New EntitySet(Of AP_StaffBroker_StaffProfile)(AddressOf Me.attach_AP_StaffBroker_StaffProfiles, AddressOf Me.detach_AP_StaffBroker_StaffProfiles)
		Me._User = CType(Nothing, EntityRef(Of User))
		Me._User1 = CType(Nothing, EntityRef(Of User))
		Me._AP_StaffBroker_StaffType = CType(Nothing, EntityRef(Of AP_StaffBroker_StaffType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StaffId() As Integer
		Get
			Return Me._StaffId
		End Get
		Set
			If ((Me._StaffId = value)  _
						= false) Then
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property DisplayName() As String
		Get
			Return Me._DisplayName
		End Get
		Set
			If (String.Equals(Me._DisplayName, value) = false) Then
				Me.OnDisplayNameChanging(value)
				Me.SendPropertyChanging
				Me._DisplayName = value
				Me.SendPropertyChanged("DisplayName")
				Me.OnDisplayNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostCenter", DbType:="NVarChar(20)")>  _
	Public Property CostCenter() As String
		Get
			Return Me._CostCenter
		End Get
		Set
			If (String.Equals(Me._CostCenter, value) = false) Then
				Me.OnCostCenterChanging(value)
				Me.SendPropertyChanging
				Me._CostCenter = value
				Me.SendPropertyChanged("CostCenter")
				Me.OnCostCenterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffTypeId", DbType:="SmallInt")>  _
	Public Property StaffTypeId() As System.Nullable(Of Short)
		Get
			Return Me._StaffTypeId
		End Get
		Set
			If (Me._StaffTypeId.Equals(value) = false) Then
				If Me._AP_StaffBroker_StaffType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffTypeId = value
				Me.SendPropertyChanged("StaffTypeId")
				Me.OnStaffTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId1", DbType:="Int NOT NULL")>  _
	Public Property UserId1() As Integer
		Get
			Return Me._UserId1
		End Get
		Set
			If ((Me._UserId1 = value)  _
						= false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserId1Changing(value)
				Me.SendPropertyChanging
				Me._UserId1 = value
				Me.SendPropertyChanged("UserId1")
				Me.OnUserId1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId2", DbType:="Int")>  _
	Public Property UserId2() As System.Nullable(Of Integer)
		Get
			Return Me._UserId2
		End Get
		Set
			If (Me._UserId2.Equals(value) = false) Then
				If Me._User1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserId2Changing(value)
				Me.SendPropertyChanging
				Me._UserId2 = value
				Me.SendPropertyChanged("UserId2")
				Me.OnUserId2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_updated", DbType:="DateTime NOT NULL")>  _
	Public Property last_updated() As Date
		Get
			Return Me._last_updated
		End Get
		Set
			If ((Me._last_updated = value)  _
						= false) Then
				Me.Onlast_updatedChanging(value)
				Me.SendPropertyChanging
				Me._last_updated = value
				Me.SendPropertyChanged("last_updated")
				Me.Onlast_updatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_Staff_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_StaffProfiles", ThisKey:="StaffId", OtherKey:="StaffId")>  _
	Public Property AP_StaffBroker_StaffProfiles() As EntitySet(Of AP_StaffBroker_StaffProfile)
		Get
			Return Me._AP_StaffBroker_StaffProfiles
		End Get
		Set
			Me._AP_StaffBroker_StaffProfiles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_AP_StaffBroker_Staff", Storage:="_User", ThisKey:="UserId1", OtherKey:="UserID", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.AP_StaffBroker_Staffs = Nothing
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_StaffBroker_Staffs = Me
					Me._UserId1 = value.UserID
				Else
					Me._UserId1 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_AP_StaffBroker_Staff1", Storage:="_User1", ThisKey:="UserId2", OtherKey:="UserID", IsForeignKey:=true)>  _
	Public Property User1() As User
		Get
			Return Me._User1.Entity
		End Get
		Set
			Dim previousValue As User = Me._User1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User1.Entity = Nothing
					previousValue.AP_StaffBroker_Staffs1 = Nothing
				End If
				Me._User1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_StaffBroker_Staffs1 = Me
					Me._UserId2 = value.UserID
				Else
					Me._UserId2 = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("User1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_StaffType_AP_StaffBroker_Staff", Storage:="_AP_StaffBroker_StaffType", ThisKey:="StaffTypeId", OtherKey:="StaffTypeId", IsForeignKey:=true)>  _
	Public Property AP_StaffBroker_StaffType() As AP_StaffBroker_StaffType
		Get
			Return Me._AP_StaffBroker_StaffType.Entity
		End Get
		Set
			Dim previousValue As AP_StaffBroker_StaffType = Me._AP_StaffBroker_StaffType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_StaffBroker_StaffType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_StaffBroker_StaffType.Entity = Nothing
					previousValue.AP_StaffBroker_Staffs.Remove(Me)
				End If
				Me._AP_StaffBroker_StaffType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_StaffBroker_Staffs.Add(Me)
					Me._StaffTypeId = value.StaffTypeId
				Else
					Me._StaffTypeId = CType(Nothing, Nullable(Of Short))
				End If
				Me.SendPropertyChanged("AP_StaffBroker_StaffType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
		Me.SendPropertyChanging
		entity.AP_StaffBroker_Staff = Me
	End Sub
	
	Private Sub detach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
		Me.SendPropertyChanging
		entity.AP_StaffBroker_Staff = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_StaffProfile")>  _
Partial Public Class AP_StaffBroker_StaffProfile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StaffProfileId As Long
	
	Private _PropertyValue As String
	
	Private _StaffPropertyDefinitionId As Integer
	
	Private _StaffId As Integer
	
	Private _last_updated As Date
	
	Private _AP_StaffBroker_Staff As EntityRef(Of AP_StaffBroker_Staff)
	
	Private _AP_StaffBroker_StaffPropertyDefinition As EntityRef(Of AP_StaffBroker_StaffPropertyDefinition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffProfileIdChanging(value As Long)
    End Sub
    Partial Private Sub OnStaffProfileIdChanged()
    End Sub
    Partial Private Sub OnPropertyValueChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValueChanged()
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub Onlast_updatedChanging(value As Date)
    End Sub
    Partial Private Sub Onlast_updatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_StaffBroker_Staff = CType(Nothing, EntityRef(Of AP_StaffBroker_Staff))
		Me._AP_StaffBroker_StaffPropertyDefinition = CType(Nothing, EntityRef(Of AP_StaffBroker_StaffPropertyDefinition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffProfileId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StaffProfileId() As Long
		Get
			Return Me._StaffProfileId
		End Get
		Set
			If ((Me._StaffProfileId = value)  _
						= false) Then
				Me.OnStaffProfileIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffProfileId = value
				Me.SendPropertyChanged("StaffProfileId")
				Me.OnStaffProfileIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValue", DbType:="VarChar(MAX)")>  _
	Public Property PropertyValue() As String
		Get
			Return Me._PropertyValue
		End Get
		Set
			If (String.Equals(Me._PropertyValue, value) = false) Then
				Me.OnPropertyValueChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValue = value
				Me.SendPropertyChanged("PropertyValue")
				Me.OnPropertyValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffPropertyDefinitionId", DbType:="Int NOT NULL")>  _
	Public Property StaffPropertyDefinitionId() As Integer
		Get
			Return Me._StaffPropertyDefinitionId
		End Get
		Set
			If ((Me._StaffPropertyDefinitionId = value)  _
						= false) Then
				If Me._AP_StaffBroker_StaffPropertyDefinition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffPropertyDefinitionIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffPropertyDefinitionId = value
				Me.SendPropertyChanged("StaffPropertyDefinitionId")
				Me.OnStaffPropertyDefinitionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="Int NOT NULL")>  _
	Public Property StaffId() As Integer
		Get
			Return Me._StaffId
		End Get
		Set
			If ((Me._StaffId = value)  _
						= false) Then
				If Me._AP_StaffBroker_Staff.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_updated", DbType:="DateTime NOT NULL")>  _
	Public Property last_updated() As Date
		Get
			Return Me._last_updated
		End Get
		Set
			If ((Me._last_updated = value)  _
						= false) Then
				Me.Onlast_updatedChanging(value)
				Me.SendPropertyChanging
				Me._last_updated = value
				Me.SendPropertyChanged("last_updated")
				Me.Onlast_updatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_Staff_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_Staff", ThisKey:="StaffId", OtherKey:="StaffId", IsForeignKey:=true)>  _
	Public Property AP_StaffBroker_Staff() As AP_StaffBroker_Staff
		Get
			Return Me._AP_StaffBroker_Staff.Entity
		End Get
		Set
			Dim previousValue As AP_StaffBroker_Staff = Me._AP_StaffBroker_Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_StaffBroker_Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_StaffBroker_Staff.Entity = Nothing
					previousValue.AP_StaffBroker_StaffProfiles.Remove(Me)
				End If
				Me._AP_StaffBroker_Staff.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_StaffBroker_StaffProfiles.Add(Me)
					Me._StaffId = value.StaffId
				Else
					Me._StaffId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AP_StaffBroker_Staff")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_StaffPropertyDefinition_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_StaffPropertyDefinition", ThisKey:="StaffPropertyDefinitionId", OtherKey:="StaffPropertyDefinitionId", IsForeignKey:=true)>  _
	Public Property AP_StaffBroker_StaffPropertyDefinition() As AP_StaffBroker_StaffPropertyDefinition
		Get
			Return Me._AP_StaffBroker_StaffPropertyDefinition.Entity
		End Get
		Set
			Dim previousValue As AP_StaffBroker_StaffPropertyDefinition = Me._AP_StaffBroker_StaffPropertyDefinition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_StaffBroker_StaffPropertyDefinition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_StaffBroker_StaffPropertyDefinition.Entity = Nothing
					previousValue.AP_StaffBroker_StaffProfiles.Remove(Me)
				End If
				Me._AP_StaffBroker_StaffPropertyDefinition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_StaffBroker_StaffProfiles.Add(Me)
					Me._StaffPropertyDefinitionId = value.StaffPropertyDefinitionId
				Else
					Me._StaffPropertyDefinitionId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AP_StaffBroker_StaffPropertyDefinition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_StaffPropertyDefinition")>  _
Partial Public Class AP_StaffBroker_StaffPropertyDefinition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StaffPropertyDefinitionId As Integer
	
	Private _PropertyName As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _ViewOrder As System.Nullable(Of Short)
	
	Private _Display As System.Nullable(Of Boolean)
	
	Private _PropertyHelp As String
	
	Private _Type As System.Nullable(Of Byte)
	
	Private _FixedFieldName As String
	
	Private _AP_StaffBroker_StaffProfiles As EntitySet(Of AP_StaffBroker_StaffProfile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffPropertyDefinitionIdChanged()
    End Sub
    Partial Private Sub OnPropertyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNameChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnViewOrderChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnViewOrderChanged()
    End Sub
    Partial Private Sub OnDisplayChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDisplayChanged()
    End Sub
    Partial Private Sub OnPropertyHelpChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyHelpChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnFixedFieldNameChanging(value As String)
    End Sub
    Partial Private Sub OnFixedFieldNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_StaffBroker_StaffProfiles = New EntitySet(Of AP_StaffBroker_StaffProfile)(AddressOf Me.attach_AP_StaffBroker_StaffProfiles, AddressOf Me.detach_AP_StaffBroker_StaffProfiles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffPropertyDefinitionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StaffPropertyDefinitionId() As Integer
		Get
			Return Me._StaffPropertyDefinitionId
		End Get
		Set
			If ((Me._StaffPropertyDefinitionId = value)  _
						= false) Then
				Me.OnStaffPropertyDefinitionIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffPropertyDefinitionId = value
				Me.SendPropertyChanged("StaffPropertyDefinitionId")
				Me.OnStaffPropertyDefinitionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property PropertyName() As String
		Get
			Return Me._PropertyName
		End Get
		Set
			If (String.Equals(Me._PropertyName, value) = false) Then
				Me.OnPropertyNameChanging(value)
				Me.SendPropertyChanging
				Me._PropertyName = value
				Me.SendPropertyChanged("PropertyName")
				Me.OnPropertyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewOrder", DbType:="SmallInt")>  _
	Public Property ViewOrder() As System.Nullable(Of Short)
		Get
			Return Me._ViewOrder
		End Get
		Set
			If (Me._ViewOrder.Equals(value) = false) Then
				Me.OnViewOrderChanging(value)
				Me.SendPropertyChanging
				Me._ViewOrder = value
				Me.SendPropertyChanged("ViewOrder")
				Me.OnViewOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Display", DbType:="Bit")>  _
	Public Property Display() As System.Nullable(Of Boolean)
		Get
			Return Me._Display
		End Get
		Set
			If (Me._Display.Equals(value) = false) Then
				Me.OnDisplayChanging(value)
				Me.SendPropertyChanging
				Me._Display = value
				Me.SendPropertyChanged("Display")
				Me.OnDisplayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyHelp", DbType:="VarChar(MAX)")>  _
	Public Property PropertyHelp() As String
		Get
			Return Me._PropertyHelp
		End Get
		Set
			If (String.Equals(Me._PropertyHelp, value) = false) Then
				Me.OnPropertyHelpChanging(value)
				Me.SendPropertyChanging
				Me._PropertyHelp = value
				Me.SendPropertyChanged("PropertyHelp")
				Me.OnPropertyHelpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="TinyInt")>  _
	Public Property Type() As System.Nullable(Of Byte)
		Get
			Return Me._Type
		End Get
		Set
			If (Me._Type.Equals(value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FixedFieldName", DbType:="NVarChar(100)")>  _
	Public Property FixedFieldName() As String
		Get
			Return Me._FixedFieldName
		End Get
		Set
			If (String.Equals(Me._FixedFieldName, value) = false) Then
				Me.OnFixedFieldNameChanging(value)
				Me.SendPropertyChanging
				Me._FixedFieldName = value
				Me.SendPropertyChanged("FixedFieldName")
				Me.OnFixedFieldNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_StaffPropertyDefinition_AP_StaffBroker_StaffProfile", Storage:="_AP_StaffBroker_StaffProfiles", ThisKey:="StaffPropertyDefinitionId", OtherKey:="StaffPropertyDefinitionId")>  _
	Public Property AP_StaffBroker_StaffProfiles() As EntitySet(Of AP_StaffBroker_StaffProfile)
		Get
			Return Me._AP_StaffBroker_StaffProfiles
		End Get
		Set
			Me._AP_StaffBroker_StaffProfiles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
		Me.SendPropertyChanging
		entity.AP_StaffBroker_StaffPropertyDefinition = Me
	End Sub
	
	Private Sub detach_AP_StaffBroker_StaffProfiles(ByVal entity As AP_StaffBroker_StaffProfile)
		Me.SendPropertyChanging
		entity.AP_StaffBroker_StaffPropertyDefinition = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_StaffBroker_StaffType")>  _
Partial Public Class AP_StaffBroker_StaffType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StaffTypeId As Short
	
	Private _Name As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _AP_StaffBroker_Staffs As EntitySet(Of AP_StaffBroker_Staff)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffTypeIdChanging(value As Short)
    End Sub
    Partial Private Sub OnStaffTypeIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_StaffBroker_Staffs = New EntitySet(Of AP_StaffBroker_Staff)(AddressOf Me.attach_AP_StaffBroker_Staffs, AddressOf Me.detach_AP_StaffBroker_Staffs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffTypeId", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StaffTypeId() As Short
		Get
			Return Me._StaffTypeId
		End Get
		Set
			If ((Me._StaffTypeId = value)  _
						= false) Then
				Me.OnStaffTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffTypeId = value
				Me.SendPropertyChanged("StaffTypeId")
				Me.OnStaffTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_StaffBroker_StaffType_AP_StaffBroker_Staff", Storage:="_AP_StaffBroker_Staffs", ThisKey:="StaffTypeId", OtherKey:="StaffTypeId")>  _
	Public Property AP_StaffBroker_Staffs() As EntitySet(Of AP_StaffBroker_Staff)
		Get
			Return Me._AP_StaffBroker_Staffs
		End Get
		Set
			Me._AP_StaffBroker_Staffs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AP_StaffBroker_Staffs(ByVal entity As AP_StaffBroker_Staff)
		Me.SendPropertyChanging
		entity.AP_StaffBroker_StaffType = Me
	End Sub
	
	Private Sub detach_AP_StaffBroker_Staffs(ByVal entity As AP_StaffBroker_Staff)
		Me.SendPropertyChanging
		entity.AP_StaffBroker_StaffType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpd_Country")>  _
Partial Public Class AP_mpd_Country
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _mpdCountryId As Integer
	
	Private _isoCode As String
	
	Private _name As String
	
	Private _portalId As System.Nullable(Of Integer)
	
	Private _lastUpdated As System.Nullable(Of Date)
	
	Private _compensationAccounts As String
	
	Private _foreighIncomeAccounts As String
	
	Private _mpdDefId As System.Nullable(Of Integer)
	
	Private _AvgSupport12 As System.Nullable(Of Decimal)
	
	Private _AvgSupport3 As System.Nullable(Of Decimal)
	
	Private _AvgSupport1 As System.Nullable(Of Decimal)
	
	Private _SplitLocal As System.Nullable(Of Double)
	
	Private _SplitForeign As System.Nullable(Of Double)
	
	Private _SplitSubsidy As System.Nullable(Of Double)
	
	Private _FullCount As Integer
	
	Private _HighCount As Integer
	
	Private _LowCount As Integer
	
	Private _VeryLowCount As Integer
	
	Private _BudgetAccuracy As System.Nullable(Of Double)
	
	Private _NoBudgetCount As Integer
	
	Private _gr_ministry_id As String
	
	Private _EstFullCount As Integer
	
	Private _EstHighCount As Integer
	
	Private _EstLowCount As Integer
	
	Private _EstVeryLowCount As Integer
	
	Private _EstAvgSupport12 As System.Nullable(Of Decimal)
	
	Private _EstAvgSupport3 As System.Nullable(Of Decimal)
	
	Private _EstAvgSupport1 As System.Nullable(Of Decimal)
	
	Private _Ap_mpd_Users As EntitySet(Of Ap_mpd_User)
	
	Private _AP_mpdCalc_Definition As EntityRef(Of AP_mpdCalc_Definition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmpdCountryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdCountryIdChanged()
    End Sub
    Partial Private Sub OnisoCodeChanging(value As String)
    End Sub
    Partial Private Sub OnisoCodeChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnportalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnportalIdChanged()
    End Sub
    Partial Private Sub OnlastUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastUpdatedChanged()
    End Sub
    Partial Private Sub OncompensationAccountsChanging(value As String)
    End Sub
    Partial Private Sub OncompensationAccountsChanged()
    End Sub
    Partial Private Sub OnforeighIncomeAccountsChanging(value As String)
    End Sub
    Partial Private Sub OnforeighIncomeAccountsChanged()
    End Sub
    Partial Private Sub OnmpdDefIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmpdDefIdChanged()
    End Sub
    Partial Private Sub OnAvgSupport12Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAvgSupport12Changed()
    End Sub
    Partial Private Sub OnAvgSupport3Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAvgSupport3Changed()
    End Sub
    Partial Private Sub OnAvgSupport1Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAvgSupport1Changed()
    End Sub
    Partial Private Sub OnSplitLocalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSplitLocalChanged()
    End Sub
    Partial Private Sub OnSplitForeignChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSplitForeignChanged()
    End Sub
    Partial Private Sub OnSplitSubsidyChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSplitSubsidyChanged()
    End Sub
    Partial Private Sub OnFullCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFullCountChanged()
    End Sub
    Partial Private Sub OnHighCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnHighCountChanged()
    End Sub
    Partial Private Sub OnLowCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnLowCountChanged()
    End Sub
    Partial Private Sub OnVeryLowCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnVeryLowCountChanged()
    End Sub
    Partial Private Sub OnBudgetAccuracyChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnBudgetAccuracyChanged()
    End Sub
    Partial Private Sub OnNoBudgetCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnNoBudgetCountChanged()
    End Sub
    Partial Private Sub Ongr_ministry_idChanging(value As String)
    End Sub
    Partial Private Sub Ongr_ministry_idChanged()
    End Sub
    Partial Private Sub OnEstFullCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnEstFullCountChanged()
    End Sub
    Partial Private Sub OnEstHighCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnEstHighCountChanged()
    End Sub
    Partial Private Sub OnEstLowCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnEstLowCountChanged()
    End Sub
    Partial Private Sub OnEstVeryLowCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnEstVeryLowCountChanged()
    End Sub
    Partial Private Sub OnEstAvgSupport12Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnEstAvgSupport12Changed()
    End Sub
    Partial Private Sub OnEstAvgSupport3Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnEstAvgSupport3Changed()
    End Sub
    Partial Private Sub OnEstAvgSupport1Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnEstAvgSupport1Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ap_mpd_Users = New EntitySet(Of Ap_mpd_User)(AddressOf Me.attach_Ap_mpd_Users, AddressOf Me.detach_Ap_mpd_Users)
		Me._AP_mpdCalc_Definition = CType(Nothing, EntityRef(Of AP_mpdCalc_Definition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdCountryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property mpdCountryId() As Integer
		Get
			Return Me._mpdCountryId
		End Get
		Set
			If ((Me._mpdCountryId = value)  _
						= false) Then
				Me.OnmpdCountryIdChanging(value)
				Me.SendPropertyChanging
				Me._mpdCountryId = value
				Me.SendPropertyChanged("mpdCountryId")
				Me.OnmpdCountryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isoCode", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property isoCode() As String
		Get
			Return Me._isoCode
		End Get
		Set
			If (String.Equals(Me._isoCode, value) = false) Then
				Me.OnisoCodeChanging(value)
				Me.SendPropertyChanging
				Me._isoCode = value
				Me.SendPropertyChanged("isoCode")
				Me.OnisoCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_portalId", DbType:="Int")>  _
	Public Property portalId() As System.Nullable(Of Integer)
		Get
			Return Me._portalId
		End Get
		Set
			If (Me._portalId.Equals(value) = false) Then
				Me.OnportalIdChanging(value)
				Me.SendPropertyChanging
				Me._portalId = value
				Me.SendPropertyChanged("portalId")
				Me.OnportalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastUpdated", DbType:="SmallDateTime")>  _
	Public Property lastUpdated() As System.Nullable(Of Date)
		Get
			Return Me._lastUpdated
		End Get
		Set
			If (Me._lastUpdated.Equals(value) = false) Then
				Me.OnlastUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._lastUpdated = value
				Me.SendPropertyChanged("lastUpdated")
				Me.OnlastUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_compensationAccounts", DbType:="NVarChar(50)")>  _
	Public Property compensationAccounts() As String
		Get
			Return Me._compensationAccounts
		End Get
		Set
			If (String.Equals(Me._compensationAccounts, value) = false) Then
				Me.OncompensationAccountsChanging(value)
				Me.SendPropertyChanging
				Me._compensationAccounts = value
				Me.SendPropertyChanged("compensationAccounts")
				Me.OncompensationAccountsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foreighIncomeAccounts", DbType:="NVarChar(50)")>  _
	Public Property foreighIncomeAccounts() As String
		Get
			Return Me._foreighIncomeAccounts
		End Get
		Set
			If (String.Equals(Me._foreighIncomeAccounts, value) = false) Then
				Me.OnforeighIncomeAccountsChanging(value)
				Me.SendPropertyChanging
				Me._foreighIncomeAccounts = value
				Me.SendPropertyChanged("foreighIncomeAccounts")
				Me.OnforeighIncomeAccountsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdDefId", DbType:="Int")>  _
	Public Property mpdDefId() As System.Nullable(Of Integer)
		Get
			Return Me._mpdDefId
		End Get
		Set
			If (Me._mpdDefId.Equals(value) = false) Then
				If Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnmpdDefIdChanging(value)
				Me.SendPropertyChanging
				Me._mpdDefId = value
				Me.SendPropertyChanged("mpdDefId")
				Me.OnmpdDefIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupport12", DbType:="Money")>  _
	Public Property AvgSupport12() As System.Nullable(Of Decimal)
		Get
			Return Me._AvgSupport12
		End Get
		Set
			If (Me._AvgSupport12.Equals(value) = false) Then
				Me.OnAvgSupport12Changing(value)
				Me.SendPropertyChanging
				Me._AvgSupport12 = value
				Me.SendPropertyChanged("AvgSupport12")
				Me.OnAvgSupport12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupport3", DbType:="Money")>  _
	Public Property AvgSupport3() As System.Nullable(Of Decimal)
		Get
			Return Me._AvgSupport3
		End Get
		Set
			If (Me._AvgSupport3.Equals(value) = false) Then
				Me.OnAvgSupport3Changing(value)
				Me.SendPropertyChanging
				Me._AvgSupport3 = value
				Me.SendPropertyChanged("AvgSupport3")
				Me.OnAvgSupport3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupport1", DbType:="Money")>  _
	Public Property AvgSupport1() As System.Nullable(Of Decimal)
		Get
			Return Me._AvgSupport1
		End Get
		Set
			If (Me._AvgSupport1.Equals(value) = false) Then
				Me.OnAvgSupport1Changing(value)
				Me.SendPropertyChanging
				Me._AvgSupport1 = value
				Me.SendPropertyChanged("AvgSupport1")
				Me.OnAvgSupport1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitLocal", DbType:="Float")>  _
	Public Property SplitLocal() As System.Nullable(Of Double)
		Get
			Return Me._SplitLocal
		End Get
		Set
			If (Me._SplitLocal.Equals(value) = false) Then
				Me.OnSplitLocalChanging(value)
				Me.SendPropertyChanging
				Me._SplitLocal = value
				Me.SendPropertyChanged("SplitLocal")
				Me.OnSplitLocalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitForeign", DbType:="Float")>  _
	Public Property SplitForeign() As System.Nullable(Of Double)
		Get
			Return Me._SplitForeign
		End Get
		Set
			If (Me._SplitForeign.Equals(value) = false) Then
				Me.OnSplitForeignChanging(value)
				Me.SendPropertyChanging
				Me._SplitForeign = value
				Me.SendPropertyChanged("SplitForeign")
				Me.OnSplitForeignChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitSubsidy", DbType:="Float")>  _
	Public Property SplitSubsidy() As System.Nullable(Of Double)
		Get
			Return Me._SplitSubsidy
		End Get
		Set
			If (Me._SplitSubsidy.Equals(value) = false) Then
				Me.OnSplitSubsidyChanging(value)
				Me.SendPropertyChanging
				Me._SplitSubsidy = value
				Me.SendPropertyChanged("SplitSubsidy")
				Me.OnSplitSubsidyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullCount", DbType:="Int NOT NULL")>  _
	Public Property FullCount() As Integer
		Get
			Return Me._FullCount
		End Get
		Set
			If ((Me._FullCount = value)  _
						= false) Then
				Me.OnFullCountChanging(value)
				Me.SendPropertyChanging
				Me._FullCount = value
				Me.SendPropertyChanged("FullCount")
				Me.OnFullCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HighCount", DbType:="Int NOT NULL")>  _
	Public Property HighCount() As Integer
		Get
			Return Me._HighCount
		End Get
		Set
			If ((Me._HighCount = value)  _
						= false) Then
				Me.OnHighCountChanging(value)
				Me.SendPropertyChanging
				Me._HighCount = value
				Me.SendPropertyChanged("HighCount")
				Me.OnHighCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LowCount", DbType:="Int NOT NULL")>  _
	Public Property LowCount() As Integer
		Get
			Return Me._LowCount
		End Get
		Set
			If ((Me._LowCount = value)  _
						= false) Then
				Me.OnLowCountChanging(value)
				Me.SendPropertyChanging
				Me._LowCount = value
				Me.SendPropertyChanged("LowCount")
				Me.OnLowCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VeryLowCount", DbType:="Int NOT NULL")>  _
	Public Property VeryLowCount() As Integer
		Get
			Return Me._VeryLowCount
		End Get
		Set
			If ((Me._VeryLowCount = value)  _
						= false) Then
				Me.OnVeryLowCountChanging(value)
				Me.SendPropertyChanging
				Me._VeryLowCount = value
				Me.SendPropertyChanged("VeryLowCount")
				Me.OnVeryLowCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BudgetAccuracy", DbType:="Float")>  _
	Public Property BudgetAccuracy() As System.Nullable(Of Double)
		Get
			Return Me._BudgetAccuracy
		End Get
		Set
			If (Me._BudgetAccuracy.Equals(value) = false) Then
				Me.OnBudgetAccuracyChanging(value)
				Me.SendPropertyChanging
				Me._BudgetAccuracy = value
				Me.SendPropertyChanged("BudgetAccuracy")
				Me.OnBudgetAccuracyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoBudgetCount", DbType:="Int NOT NULL")>  _
	Public Property NoBudgetCount() As Integer
		Get
			Return Me._NoBudgetCount
		End Get
		Set
			If ((Me._NoBudgetCount = value)  _
						= false) Then
				Me.OnNoBudgetCountChanging(value)
				Me.SendPropertyChanging
				Me._NoBudgetCount = value
				Me.SendPropertyChanged("NoBudgetCount")
				Me.OnNoBudgetCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gr_ministry_id", DbType:="VarChar(50)")>  _
	Public Property gr_ministry_id() As String
		Get
			Return Me._gr_ministry_id
		End Get
		Set
			If (String.Equals(Me._gr_ministry_id, value) = false) Then
				Me.Ongr_ministry_idChanging(value)
				Me.SendPropertyChanging
				Me._gr_ministry_id = value
				Me.SendPropertyChanged("gr_ministry_id")
				Me.Ongr_ministry_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstFullCount", DbType:="Int NOT NULL")>  _
	Public Property EstFullCount() As Integer
		Get
			Return Me._EstFullCount
		End Get
		Set
			If ((Me._EstFullCount = value)  _
						= false) Then
				Me.OnEstFullCountChanging(value)
				Me.SendPropertyChanging
				Me._EstFullCount = value
				Me.SendPropertyChanged("EstFullCount")
				Me.OnEstFullCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstHighCount", DbType:="Int NOT NULL")>  _
	Public Property EstHighCount() As Integer
		Get
			Return Me._EstHighCount
		End Get
		Set
			If ((Me._EstHighCount = value)  _
						= false) Then
				Me.OnEstHighCountChanging(value)
				Me.SendPropertyChanging
				Me._EstHighCount = value
				Me.SendPropertyChanged("EstHighCount")
				Me.OnEstHighCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstLowCount", DbType:="Int NOT NULL")>  _
	Public Property EstLowCount() As Integer
		Get
			Return Me._EstLowCount
		End Get
		Set
			If ((Me._EstLowCount = value)  _
						= false) Then
				Me.OnEstLowCountChanging(value)
				Me.SendPropertyChanging
				Me._EstLowCount = value
				Me.SendPropertyChanged("EstLowCount")
				Me.OnEstLowCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstVeryLowCount", DbType:="Int NOT NULL")>  _
	Public Property EstVeryLowCount() As Integer
		Get
			Return Me._EstVeryLowCount
		End Get
		Set
			If ((Me._EstVeryLowCount = value)  _
						= false) Then
				Me.OnEstVeryLowCountChanging(value)
				Me.SendPropertyChanging
				Me._EstVeryLowCount = value
				Me.SendPropertyChanged("EstVeryLowCount")
				Me.OnEstVeryLowCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstAvgSupport12", DbType:="Money")>  _
	Public Property EstAvgSupport12() As System.Nullable(Of Decimal)
		Get
			Return Me._EstAvgSupport12
		End Get
		Set
			If (Me._EstAvgSupport12.Equals(value) = false) Then
				Me.OnEstAvgSupport12Changing(value)
				Me.SendPropertyChanging
				Me._EstAvgSupport12 = value
				Me.SendPropertyChanged("EstAvgSupport12")
				Me.OnEstAvgSupport12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstAvgSupport3", DbType:="Money")>  _
	Public Property EstAvgSupport3() As System.Nullable(Of Decimal)
		Get
			Return Me._EstAvgSupport3
		End Get
		Set
			If (Me._EstAvgSupport3.Equals(value) = false) Then
				Me.OnEstAvgSupport3Changing(value)
				Me.SendPropertyChanging
				Me._EstAvgSupport3 = value
				Me.SendPropertyChanged("EstAvgSupport3")
				Me.OnEstAvgSupport3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstAvgSupport1", DbType:="Money")>  _
	Public Property EstAvgSupport1() As System.Nullable(Of Decimal)
		Get
			Return Me._EstAvgSupport1
		End Get
		Set
			If (Me._EstAvgSupport1.Equals(value) = false) Then
				Me.OnEstAvgSupport1Changing(value)
				Me.SendPropertyChanging
				Me._EstAvgSupport1 = value
				Me.SendPropertyChanged("EstAvgSupport1")
				Me.OnEstAvgSupport1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpd_Country_Ap_mpd_User", Storage:="_Ap_mpd_Users", ThisKey:="mpdCountryId", OtherKey:="mpdCountryId")>  _
	Public Property Ap_mpd_Users() As EntitySet(Of Ap_mpd_User)
		Get
			Return Me._Ap_mpd_Users
		End Get
		Set
			Me._Ap_mpd_Users.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpd_Country", Storage:="_AP_mpdCalc_Definition", ThisKey:="mpdDefId", OtherKey:="mpdDefId", IsForeignKey:=true)>  _
	Public Property AP_mpdCalc_Definition() As AP_mpdCalc_Definition
		Get
			Return Me._AP_mpdCalc_Definition.Entity
		End Get
		Set
			Dim previousValue As AP_mpdCalc_Definition = Me._AP_mpdCalc_Definition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_mpdCalc_Definition.Entity = Nothing
					previousValue.AP_mpd_Countries = Nothing
				End If
				Me._AP_mpdCalc_Definition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_mpd_Countries = Me
					Me._mpdDefId = value.mpdDefId
				Else
					Me._mpdDefId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("AP_mpdCalc_Definition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Ap_mpd_Users(ByVal entity As Ap_mpd_User)
		Me.SendPropertyChanging
		entity.AP_mpd_Country = Me
	End Sub
	
	Private Sub detach_Ap_mpd_Users(ByVal entity As Ap_mpd_User)
		Me.SendPropertyChanging
		entity.AP_mpd_Country = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ap_mpd_User")>  _
Partial Public Class Ap_mpd_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AP_mpd_UserId As Long
	
	Private _StaffId As System.Nullable(Of Integer)
	
	Private _mpdCountryId As Integer
	
	Private _AvgIncome12 As Decimal
	
	Private _AvgIncome3 As Decimal
	
	Private _AvgIncome1 As Decimal
	
	Private _SplitLocal As Double
	
	Private _SplitForeign As Double
	
	Private _SplitSubsidy As System.Nullable(Of Double)
	
	Private _AvgExpenses As Decimal
	
	Private _Name As String
	
	Private _Email As String
	
	Private _Phone As String
	
	Private _Key_GUID As String
	
	Private _AvgSupLevel12 As Double
	
	Private _AvgSupLevel3 As Double
	
	Private _AvgSupLevel1 As Double
	
	Private _LocalIncome12 As Decimal
	
	Private _ForeignIncome12 As Decimal
	
	Private _SubsidyIncome12 As Decimal
	
	Private _AvgExpenseBudget12 As Decimal
	
	Private _AvgMPDBudget12 As Decimal
	
	Private _AvgIncome As Decimal
	
	Private _gr_min_membership_id As String
	
	Private _gr_person_id As String
	
	Private _EstSupLevel12 As Double
	
	Private _EstSupLevel3 As Double
	
	Private _EstSupLevel1 As Double
	
	Private _AP_mpd_UserAccountInfos As EntitySet(Of AP_mpd_UserAccountInfo)
	
	Private _AP_mpd_Country As EntityRef(Of AP_mpd_Country)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAP_mpd_UserIdChanging(value As Long)
    End Sub
    Partial Private Sub OnAP_mpd_UserIdChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnmpdCountryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdCountryIdChanged()
    End Sub
    Partial Private Sub OnAvgIncome12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnAvgIncome12Changed()
    End Sub
    Partial Private Sub OnAvgIncome3Changing(value As Decimal)
    End Sub
    Partial Private Sub OnAvgIncome3Changed()
    End Sub
    Partial Private Sub OnAvgIncome1Changing(value As Decimal)
    End Sub
    Partial Private Sub OnAvgIncome1Changed()
    End Sub
    Partial Private Sub OnSplitLocalChanging(value As Double)
    End Sub
    Partial Private Sub OnSplitLocalChanged()
    End Sub
    Partial Private Sub OnSplitForeignChanging(value As Double)
    End Sub
    Partial Private Sub OnSplitForeignChanged()
    End Sub
    Partial Private Sub OnSplitSubsidyChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSplitSubsidyChanged()
    End Sub
    Partial Private Sub OnAvgExpensesChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAvgExpensesChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnKey_GUIDChanging(value As String)
    End Sub
    Partial Private Sub OnKey_GUIDChanged()
    End Sub
    Partial Private Sub OnAvgSupLevel12Changing(value As Double)
    End Sub
    Partial Private Sub OnAvgSupLevel12Changed()
    End Sub
    Partial Private Sub OnAvgSupLevel3Changing(value As Double)
    End Sub
    Partial Private Sub OnAvgSupLevel3Changed()
    End Sub
    Partial Private Sub OnAvgSupLevel1Changing(value As Double)
    End Sub
    Partial Private Sub OnAvgSupLevel1Changed()
    End Sub
    Partial Private Sub OnLocalIncome12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnLocalIncome12Changed()
    End Sub
    Partial Private Sub OnForeignIncome12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnForeignIncome12Changed()
    End Sub
    Partial Private Sub OnSubsidyIncome12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnSubsidyIncome12Changed()
    End Sub
    Partial Private Sub OnAvgExpenseBudget12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnAvgExpenseBudget12Changed()
    End Sub
    Partial Private Sub OnAvgMPDBudget12Changing(value As Decimal)
    End Sub
    Partial Private Sub OnAvgMPDBudget12Changed()
    End Sub
    Partial Private Sub OnAvgIncomeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAvgIncomeChanged()
    End Sub
    Partial Private Sub Ongr_min_membership_idChanging(value As String)
    End Sub
    Partial Private Sub Ongr_min_membership_idChanged()
    End Sub
    Partial Private Sub Ongr_person_idChanging(value As String)
    End Sub
    Partial Private Sub Ongr_person_idChanged()
    End Sub
    Partial Private Sub OnEstSupLevel12Changing(value As Double)
    End Sub
    Partial Private Sub OnEstSupLevel12Changed()
    End Sub
    Partial Private Sub OnEstSupLevel3Changing(value As Double)
    End Sub
    Partial Private Sub OnEstSupLevel3Changed()
    End Sub
    Partial Private Sub OnEstSupLevel1Changing(value As Double)
    End Sub
    Partial Private Sub OnEstSupLevel1Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_mpd_UserAccountInfos = New EntitySet(Of AP_mpd_UserAccountInfo)(AddressOf Me.attach_AP_mpd_UserAccountInfos, AddressOf Me.detach_AP_mpd_UserAccountInfos)
		Me._AP_mpd_Country = CType(Nothing, EntityRef(Of AP_mpd_Country))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AP_mpd_UserId", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AP_mpd_UserId() As Long
		Get
			Return Me._AP_mpd_UserId
		End Get
		Set
			If ((Me._AP_mpd_UserId = value)  _
						= false) Then
				Me.OnAP_mpd_UserIdChanging(value)
				Me.SendPropertyChanging
				Me._AP_mpd_UserId = value
				Me.SendPropertyChanged("AP_mpd_UserId")
				Me.OnAP_mpd_UserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="Int")>  _
	Public Property StaffId() As System.Nullable(Of Integer)
		Get
			Return Me._StaffId
		End Get
		Set
			If (Me._StaffId.Equals(value) = false) Then
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdCountryId", DbType:="Int NOT NULL")>  _
	Public Property mpdCountryId() As Integer
		Get
			Return Me._mpdCountryId
		End Get
		Set
			If ((Me._mpdCountryId = value)  _
						= false) Then
				If Me._AP_mpd_Country.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnmpdCountryIdChanging(value)
				Me.SendPropertyChanging
				Me._mpdCountryId = value
				Me.SendPropertyChanged("mpdCountryId")
				Me.OnmpdCountryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgIncome12", DbType:="Money NOT NULL")>  _
	Public Property AvgIncome12() As Decimal
		Get
			Return Me._AvgIncome12
		End Get
		Set
			If ((Me._AvgIncome12 = value)  _
						= false) Then
				Me.OnAvgIncome12Changing(value)
				Me.SendPropertyChanging
				Me._AvgIncome12 = value
				Me.SendPropertyChanged("AvgIncome12")
				Me.OnAvgIncome12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgIncome3", DbType:="Money NOT NULL")>  _
	Public Property AvgIncome3() As Decimal
		Get
			Return Me._AvgIncome3
		End Get
		Set
			If ((Me._AvgIncome3 = value)  _
						= false) Then
				Me.OnAvgIncome3Changing(value)
				Me.SendPropertyChanging
				Me._AvgIncome3 = value
				Me.SendPropertyChanged("AvgIncome3")
				Me.OnAvgIncome3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgIncome1", DbType:="Money NOT NULL")>  _
	Public Property AvgIncome1() As Decimal
		Get
			Return Me._AvgIncome1
		End Get
		Set
			If ((Me._AvgIncome1 = value)  _
						= false) Then
				Me.OnAvgIncome1Changing(value)
				Me.SendPropertyChanging
				Me._AvgIncome1 = value
				Me.SendPropertyChanged("AvgIncome1")
				Me.OnAvgIncome1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitLocal", DbType:="Float NOT NULL")>  _
	Public Property SplitLocal() As Double
		Get
			Return Me._SplitLocal
		End Get
		Set
			If ((Me._SplitLocal = value)  _
						= false) Then
				Me.OnSplitLocalChanging(value)
				Me.SendPropertyChanging
				Me._SplitLocal = value
				Me.SendPropertyChanged("SplitLocal")
				Me.OnSplitLocalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitForeign", DbType:="Float NOT NULL")>  _
	Public Property SplitForeign() As Double
		Get
			Return Me._SplitForeign
		End Get
		Set
			If ((Me._SplitForeign = value)  _
						= false) Then
				Me.OnSplitForeignChanging(value)
				Me.SendPropertyChanging
				Me._SplitForeign = value
				Me.SendPropertyChanged("SplitForeign")
				Me.OnSplitForeignChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SplitSubsidy", DbType:="Float")>  _
	Public Property SplitSubsidy() As System.Nullable(Of Double)
		Get
			Return Me._SplitSubsidy
		End Get
		Set
			If (Me._SplitSubsidy.Equals(value) = false) Then
				Me.OnSplitSubsidyChanging(value)
				Me.SendPropertyChanging
				Me._SplitSubsidy = value
				Me.SendPropertyChanged("SplitSubsidy")
				Me.OnSplitSubsidyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgExpenses", DbType:="Money NOT NULL")>  _
	Public Property AvgExpenses() As Decimal
		Get
			Return Me._AvgExpenses
		End Get
		Set
			If ((Me._AvgExpenses = value)  _
						= false) Then
				Me.OnAvgExpensesChanging(value)
				Me.SendPropertyChanging
				Me._AvgExpenses = value
				Me.SendPropertyChanged("AvgExpenses")
				Me.OnAvgExpensesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(80)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(80)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(80)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Key_GUID", DbType:="VarChar(40)")>  _
	Public Property Key_GUID() As String
		Get
			Return Me._Key_GUID
		End Get
		Set
			If (String.Equals(Me._Key_GUID, value) = false) Then
				Me.OnKey_GUIDChanging(value)
				Me.SendPropertyChanging
				Me._Key_GUID = value
				Me.SendPropertyChanged("Key_GUID")
				Me.OnKey_GUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupLevel12", DbType:="Float NOT NULL")>  _
	Public Property AvgSupLevel12() As Double
		Get
			Return Me._AvgSupLevel12
		End Get
		Set
			If ((Me._AvgSupLevel12 = value)  _
						= false) Then
				Me.OnAvgSupLevel12Changing(value)
				Me.SendPropertyChanging
				Me._AvgSupLevel12 = value
				Me.SendPropertyChanged("AvgSupLevel12")
				Me.OnAvgSupLevel12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupLevel3", DbType:="Float NOT NULL")>  _
	Public Property AvgSupLevel3() As Double
		Get
			Return Me._AvgSupLevel3
		End Get
		Set
			If ((Me._AvgSupLevel3 = value)  _
						= false) Then
				Me.OnAvgSupLevel3Changing(value)
				Me.SendPropertyChanging
				Me._AvgSupLevel3 = value
				Me.SendPropertyChanged("AvgSupLevel3")
				Me.OnAvgSupLevel3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgSupLevel1", DbType:="Float NOT NULL")>  _
	Public Property AvgSupLevel1() As Double
		Get
			Return Me._AvgSupLevel1
		End Get
		Set
			If ((Me._AvgSupLevel1 = value)  _
						= false) Then
				Me.OnAvgSupLevel1Changing(value)
				Me.SendPropertyChanging
				Me._AvgSupLevel1 = value
				Me.SendPropertyChanged("AvgSupLevel1")
				Me.OnAvgSupLevel1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalIncome12", DbType:="Money NOT NULL")>  _
	Public Property LocalIncome12() As Decimal
		Get
			Return Me._LocalIncome12
		End Get
		Set
			If ((Me._LocalIncome12 = value)  _
						= false) Then
				Me.OnLocalIncome12Changing(value)
				Me.SendPropertyChanging
				Me._LocalIncome12 = value
				Me.SendPropertyChanged("LocalIncome12")
				Me.OnLocalIncome12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ForeignIncome12", DbType:="Money NOT NULL")>  _
	Public Property ForeignIncome12() As Decimal
		Get
			Return Me._ForeignIncome12
		End Get
		Set
			If ((Me._ForeignIncome12 = value)  _
						= false) Then
				Me.OnForeignIncome12Changing(value)
				Me.SendPropertyChanging
				Me._ForeignIncome12 = value
				Me.SendPropertyChanged("ForeignIncome12")
				Me.OnForeignIncome12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubsidyIncome12", DbType:="Money NOT NULL")>  _
	Public Property SubsidyIncome12() As Decimal
		Get
			Return Me._SubsidyIncome12
		End Get
		Set
			If ((Me._SubsidyIncome12 = value)  _
						= false) Then
				Me.OnSubsidyIncome12Changing(value)
				Me.SendPropertyChanging
				Me._SubsidyIncome12 = value
				Me.SendPropertyChanged("SubsidyIncome12")
				Me.OnSubsidyIncome12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgExpenseBudget12", DbType:="Money NOT NULL")>  _
	Public Property AvgExpenseBudget12() As Decimal
		Get
			Return Me._AvgExpenseBudget12
		End Get
		Set
			If ((Me._AvgExpenseBudget12 = value)  _
						= false) Then
				Me.OnAvgExpenseBudget12Changing(value)
				Me.SendPropertyChanging
				Me._AvgExpenseBudget12 = value
				Me.SendPropertyChanged("AvgExpenseBudget12")
				Me.OnAvgExpenseBudget12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgMPDBudget12", DbType:="Money NOT NULL")>  _
	Public Property AvgMPDBudget12() As Decimal
		Get
			Return Me._AvgMPDBudget12
		End Get
		Set
			If ((Me._AvgMPDBudget12 = value)  _
						= false) Then
				Me.OnAvgMPDBudget12Changing(value)
				Me.SendPropertyChanging
				Me._AvgMPDBudget12 = value
				Me.SendPropertyChanged("AvgMPDBudget12")
				Me.OnAvgMPDBudget12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgIncome", DbType:="Money NOT NULL")>  _
	Public Property AvgIncome() As Decimal
		Get
			Return Me._AvgIncome
		End Get
		Set
			If ((Me._AvgIncome = value)  _
						= false) Then
				Me.OnAvgIncomeChanging(value)
				Me.SendPropertyChanging
				Me._AvgIncome = value
				Me.SendPropertyChanged("AvgIncome")
				Me.OnAvgIncomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gr_min_membership_id", DbType:="VarChar(50)")>  _
	Public Property gr_min_membership_id() As String
		Get
			Return Me._gr_min_membership_id
		End Get
		Set
			If (String.Equals(Me._gr_min_membership_id, value) = false) Then
				Me.Ongr_min_membership_idChanging(value)
				Me.SendPropertyChanging
				Me._gr_min_membership_id = value
				Me.SendPropertyChanged("gr_min_membership_id")
				Me.Ongr_min_membership_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gr_person_id", DbType:="VarChar(50)")>  _
	Public Property gr_person_id() As String
		Get
			Return Me._gr_person_id
		End Get
		Set
			If (String.Equals(Me._gr_person_id, value) = false) Then
				Me.Ongr_person_idChanging(value)
				Me.SendPropertyChanging
				Me._gr_person_id = value
				Me.SendPropertyChanged("gr_person_id")
				Me.Ongr_person_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstSupLevel12", DbType:="Float NOT NULL")>  _
	Public Property EstSupLevel12() As Double
		Get
			Return Me._EstSupLevel12
		End Get
		Set
			If ((Me._EstSupLevel12 = value)  _
						= false) Then
				Me.OnEstSupLevel12Changing(value)
				Me.SendPropertyChanging
				Me._EstSupLevel12 = value
				Me.SendPropertyChanged("EstSupLevel12")
				Me.OnEstSupLevel12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstSupLevel3", DbType:="Float NOT NULL")>  _
	Public Property EstSupLevel3() As Double
		Get
			Return Me._EstSupLevel3
		End Get
		Set
			If ((Me._EstSupLevel3 = value)  _
						= false) Then
				Me.OnEstSupLevel3Changing(value)
				Me.SendPropertyChanging
				Me._EstSupLevel3 = value
				Me.SendPropertyChanged("EstSupLevel3")
				Me.OnEstSupLevel3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstSupLevel1", DbType:="Float NOT NULL")>  _
	Public Property EstSupLevel1() As Double
		Get
			Return Me._EstSupLevel1
		End Get
		Set
			If ((Me._EstSupLevel1 = value)  _
						= false) Then
				Me.OnEstSupLevel1Changing(value)
				Me.SendPropertyChanging
				Me._EstSupLevel1 = value
				Me.SendPropertyChanged("EstSupLevel1")
				Me.OnEstSupLevel1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ap_mpd_User_AP_mpd_UserAccountInfo", Storage:="_AP_mpd_UserAccountInfos", ThisKey:="AP_mpd_UserId", OtherKey:="mpdUserId")>  _
	Public Property AP_mpd_UserAccountInfos() As EntitySet(Of AP_mpd_UserAccountInfo)
		Get
			Return Me._AP_mpd_UserAccountInfos
		End Get
		Set
			Me._AP_mpd_UserAccountInfos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpd_Country_Ap_mpd_User", Storage:="_AP_mpd_Country", ThisKey:="mpdCountryId", OtherKey:="mpdCountryId", IsForeignKey:=true)>  _
	Public Property AP_mpd_Country() As AP_mpd_Country
		Get
			Return Me._AP_mpd_Country.Entity
		End Get
		Set
			Dim previousValue As AP_mpd_Country = Me._AP_mpd_Country.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_mpd_Country.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_mpd_Country.Entity = Nothing
					previousValue.Ap_mpd_Users.Remove(Me)
				End If
				Me._AP_mpd_Country.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ap_mpd_Users.Add(Me)
					Me._mpdCountryId = value.mpdCountryId
				Else
					Me._mpdCountryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AP_mpd_Country")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AP_mpd_UserAccountInfos(ByVal entity As AP_mpd_UserAccountInfo)
		Me.SendPropertyChanging
		entity.Ap_mpd_User = Me
	End Sub
	
	Private Sub detach_AP_mpd_UserAccountInfos(ByVal entity As AP_mpd_UserAccountInfo)
		Me.SendPropertyChanging
		entity.Ap_mpd_User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpdCalc_StaffBudget")>  _
Partial Public Class AP_mpdCalc_StaffBudget
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StaffBudgetId As Integer
	
	Private _StaffId As Integer
	
	Private _DefinitionId As Integer
	
	Private _BudgetYearStart As Short
	
	Private _SubmittedOn As System.Nullable(Of Date)
	
	Private _ApprovedBy As System.Nullable(Of Integer)
	
	Private _ApprovedOn As System.Nullable(Of Date)
	
	Private _ProcessedBy As System.Nullable(Of Integer)
	
	Private _ProcessedOn As System.Nullable(Of Date)
	
	Private _Status As Short
	
	Private _CurrentSupportLevel As System.Nullable(Of Decimal)
	
	Private _TotalBudget As System.Nullable(Of Decimal)
	
	Private _BudgetPeriodStart As String
	
	Private _Compensation As Decimal
	
	Private _ToRaise As Decimal
	
	Private _AP_mpdCalc_Definition As EntityRef(Of AP_mpdCalc_Definition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffBudgetIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffBudgetIdChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDefinitionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDefinitionIdChanged()
    End Sub
    Partial Private Sub OnBudgetYearStartChanging(value As Short)
    End Sub
    Partial Private Sub OnBudgetYearStartChanged()
    End Sub
    Partial Private Sub OnSubmittedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSubmittedOnChanged()
    End Sub
    Partial Private Sub OnApprovedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApprovedByChanged()
    End Sub
    Partial Private Sub OnApprovedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnApprovedOnChanged()
    End Sub
    Partial Private Sub OnProcessedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProcessedByChanged()
    End Sub
    Partial Private Sub OnProcessedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnProcessedOnChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Short)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnCurrentSupportLevelChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCurrentSupportLevelChanged()
    End Sub
    Partial Private Sub OnTotalBudgetChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalBudgetChanged()
    End Sub
    Partial Private Sub OnBudgetPeriodStartChanging(value As String)
    End Sub
    Partial Private Sub OnBudgetPeriodStartChanged()
    End Sub
    Partial Private Sub OnCompensationChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCompensationChanged()
    End Sub
    Partial Private Sub OnToRaiseChanging(value As Decimal)
    End Sub
    Partial Private Sub OnToRaiseChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_mpdCalc_Definition = CType(Nothing, EntityRef(Of AP_mpdCalc_Definition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffBudgetId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StaffBudgetId() As Integer
		Get
			Return Me._StaffBudgetId
		End Get
		Set
			If ((Me._StaffBudgetId = value)  _
						= false) Then
				Me.OnStaffBudgetIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffBudgetId = value
				Me.SendPropertyChanged("StaffBudgetId")
				Me.OnStaffBudgetIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="Int NOT NULL")>  _
	Public Property StaffId() As Integer
		Get
			Return Me._StaffId
		End Get
		Set
			If ((Me._StaffId = value)  _
						= false) Then
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefinitionId", DbType:="Int NOT NULL")>  _
	Public Property DefinitionId() As Integer
		Get
			Return Me._DefinitionId
		End Get
		Set
			If ((Me._DefinitionId = value)  _
						= false) Then
				If Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDefinitionIdChanging(value)
				Me.SendPropertyChanging
				Me._DefinitionId = value
				Me.SendPropertyChanged("DefinitionId")
				Me.OnDefinitionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BudgetYearStart", DbType:="SmallInt NOT NULL")>  _
	Public Property BudgetYearStart() As Short
		Get
			Return Me._BudgetYearStart
		End Get
		Set
			If ((Me._BudgetYearStart = value)  _
						= false) Then
				Me.OnBudgetYearStartChanging(value)
				Me.SendPropertyChanging
				Me._BudgetYearStart = value
				Me.SendPropertyChanged("BudgetYearStart")
				Me.OnBudgetYearStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubmittedOn", DbType:="DateTime")>  _
	Public Property SubmittedOn() As System.Nullable(Of Date)
		Get
			Return Me._SubmittedOn
		End Get
		Set
			If (Me._SubmittedOn.Equals(value) = false) Then
				Me.OnSubmittedOnChanging(value)
				Me.SendPropertyChanging
				Me._SubmittedOn = value
				Me.SendPropertyChanged("SubmittedOn")
				Me.OnSubmittedOnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovedBy", DbType:="Int")>  _
	Public Property ApprovedBy() As System.Nullable(Of Integer)
		Get
			Return Me._ApprovedBy
		End Get
		Set
			If (Me._ApprovedBy.Equals(value) = false) Then
				Me.OnApprovedByChanging(value)
				Me.SendPropertyChanging
				Me._ApprovedBy = value
				Me.SendPropertyChanged("ApprovedBy")
				Me.OnApprovedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovedOn", DbType:="DateTime")>  _
	Public Property ApprovedOn() As System.Nullable(Of Date)
		Get
			Return Me._ApprovedOn
		End Get
		Set
			If (Me._ApprovedOn.Equals(value) = false) Then
				Me.OnApprovedOnChanging(value)
				Me.SendPropertyChanging
				Me._ApprovedOn = value
				Me.SendPropertyChanged("ApprovedOn")
				Me.OnApprovedOnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProcessedBy", DbType:="Int")>  _
	Public Property ProcessedBy() As System.Nullable(Of Integer)
		Get
			Return Me._ProcessedBy
		End Get
		Set
			If (Me._ProcessedBy.Equals(value) = false) Then
				Me.OnProcessedByChanging(value)
				Me.SendPropertyChanging
				Me._ProcessedBy = value
				Me.SendPropertyChanged("ProcessedBy")
				Me.OnProcessedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProcessedOn", DbType:="DateTime")>  _
	Public Property ProcessedOn() As System.Nullable(Of Date)
		Get
			Return Me._ProcessedOn
		End Get
		Set
			If (Me._ProcessedOn.Equals(value) = false) Then
				Me.OnProcessedOnChanging(value)
				Me.SendPropertyChanging
				Me._ProcessedOn = value
				Me.SendPropertyChanged("ProcessedOn")
				Me.OnProcessedOnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="SmallInt NOT NULL")>  _
	Public Property Status() As Short
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentSupportLevel", DbType:="Money")>  _
	Public Property CurrentSupportLevel() As System.Nullable(Of Decimal)
		Get
			Return Me._CurrentSupportLevel
		End Get
		Set
			If (Me._CurrentSupportLevel.Equals(value) = false) Then
				Me.OnCurrentSupportLevelChanging(value)
				Me.SendPropertyChanging
				Me._CurrentSupportLevel = value
				Me.SendPropertyChanged("CurrentSupportLevel")
				Me.OnCurrentSupportLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalBudget", DbType:="Money")>  _
	Public Property TotalBudget() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalBudget
		End Get
		Set
			If (Me._TotalBudget.Equals(value) = false) Then
				Me.OnTotalBudgetChanging(value)
				Me.SendPropertyChanging
				Me._TotalBudget = value
				Me.SendPropertyChanged("TotalBudget")
				Me.OnTotalBudgetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BudgetPeriodStart", DbType:="VarChar(6)")>  _
	Public Property BudgetPeriodStart() As String
		Get
			Return Me._BudgetPeriodStart
		End Get
		Set
			If (String.Equals(Me._BudgetPeriodStart, value) = false) Then
				Me.OnBudgetPeriodStartChanging(value)
				Me.SendPropertyChanging
				Me._BudgetPeriodStart = value
				Me.SendPropertyChanged("BudgetPeriodStart")
				Me.OnBudgetPeriodStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Compensation", DbType:="Money NOT NULL")>  _
	Public Property Compensation() As Decimal
		Get
			Return Me._Compensation
		End Get
		Set
			If ((Me._Compensation = value)  _
						= false) Then
				Me.OnCompensationChanging(value)
				Me.SendPropertyChanging
				Me._Compensation = value
				Me.SendPropertyChanged("Compensation")
				Me.OnCompensationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToRaise", DbType:="Money NOT NULL")>  _
	Public Property ToRaise() As Decimal
		Get
			Return Me._ToRaise
		End Get
		Set
			If ((Me._ToRaise = value)  _
						= false) Then
				Me.OnToRaiseChanging(value)
				Me.SendPropertyChanging
				Me._ToRaise = value
				Me.SendPropertyChanged("ToRaise")
				Me.OnToRaiseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpdCalc_StaffBudget", Storage:="_AP_mpdCalc_Definition", ThisKey:="DefinitionId", OtherKey:="mpdDefId", IsForeignKey:=true)>  _
	Public Property AP_mpdCalc_Definition() As AP_mpdCalc_Definition
		Get
			Return Me._AP_mpdCalc_Definition.Entity
		End Get
		Set
			Dim previousValue As AP_mpdCalc_Definition = Me._AP_mpdCalc_Definition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_mpdCalc_Definition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_mpdCalc_Definition.Entity = Nothing
					previousValue.AP_mpdCalc_StaffBudgets.Remove(Me)
				End If
				Me._AP_mpdCalc_Definition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_mpdCalc_StaffBudgets.Add(Me)
					Me._DefinitionId = value.mpdDefId
				Else
					Me._DefinitionId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AP_mpdCalc_Definition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpdCalc_Definition")>  _
Partial Public Class AP_mpdCalc_Definition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _mpdDefId As Integer
	
	Private _TabModuleId As Integer
	
	Private _PortalId As Integer
	
	Private _ActiveFromYear As Short
	
	Private _AssessmentRate As Double
	
	Private _ShowComplience As Boolean
	
	Private _Complience As String
	
	Private _FirstBudgetPeriod As System.Nullable(Of Byte)
	
	Private _StaffTypes As String
	
	Private _Compensation As String
	
	Private _Assessment As String
	
	Private _AP_mpd_Countries As EntityRef(Of AP_mpd_Country)
	
	Private _AP_mpdCalc_StaffBudgets As EntitySet(Of AP_mpdCalc_StaffBudget)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmpdDefIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdDefIdChanged()
    End Sub
    Partial Private Sub OnTabModuleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTabModuleIdChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnActiveFromYearChanging(value As Short)
    End Sub
    Partial Private Sub OnActiveFromYearChanged()
    End Sub
    Partial Private Sub OnAssessmentRateChanging(value As Double)
    End Sub
    Partial Private Sub OnAssessmentRateChanged()
    End Sub
    Partial Private Sub OnShowComplienceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShowComplienceChanged()
    End Sub
    Partial Private Sub OnComplienceChanging(value As String)
    End Sub
    Partial Private Sub OnComplienceChanged()
    End Sub
    Partial Private Sub OnFirstBudgetPeriodChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnFirstBudgetPeriodChanged()
    End Sub
    Partial Private Sub OnStaffTypesChanging(value As String)
    End Sub
    Partial Private Sub OnStaffTypesChanged()
    End Sub
    Partial Private Sub OnCompensationChanging(value As String)
    End Sub
    Partial Private Sub OnCompensationChanged()
    End Sub
    Partial Private Sub OnAssessmentChanging(value As String)
    End Sub
    Partial Private Sub OnAssessmentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AP_mpd_Countries = CType(Nothing, EntityRef(Of AP_mpd_Country))
		Me._AP_mpdCalc_StaffBudgets = New EntitySet(Of AP_mpdCalc_StaffBudget)(AddressOf Me.attach_AP_mpdCalc_StaffBudgets, AddressOf Me.detach_AP_mpdCalc_StaffBudgets)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdDefId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property mpdDefId() As Integer
		Get
			Return Me._mpdDefId
		End Get
		Set
			If ((Me._mpdDefId = value)  _
						= false) Then
				Me.OnmpdDefIdChanging(value)
				Me.SendPropertyChanging
				Me._mpdDefId = value
				Me.SendPropertyChanged("mpdDefId")
				Me.OnmpdDefIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabModuleId", DbType:="Int NOT NULL")>  _
	Public Property TabModuleId() As Integer
		Get
			Return Me._TabModuleId
		End Get
		Set
			If ((Me._TabModuleId = value)  _
						= false) Then
				Me.OnTabModuleIdChanging(value)
				Me.SendPropertyChanging
				Me._TabModuleId = value
				Me.SendPropertyChanged("TabModuleId")
				Me.OnTabModuleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL")>  _
	Public Property PortalId() As Integer
		Get
			Return Me._PortalId
		End Get
		Set
			If ((Me._PortalId = value)  _
						= false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActiveFromYear", DbType:="SmallInt NOT NULL")>  _
	Public Property ActiveFromYear() As Short
		Get
			Return Me._ActiveFromYear
		End Get
		Set
			If ((Me._ActiveFromYear = value)  _
						= false) Then
				Me.OnActiveFromYearChanging(value)
				Me.SendPropertyChanging
				Me._ActiveFromYear = value
				Me.SendPropertyChanged("ActiveFromYear")
				Me.OnActiveFromYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssessmentRate", DbType:="Float NOT NULL")>  _
	Public Property AssessmentRate() As Double
		Get
			Return Me._AssessmentRate
		End Get
		Set
			If ((Me._AssessmentRate = value)  _
						= false) Then
				Me.OnAssessmentRateChanging(value)
				Me.SendPropertyChanging
				Me._AssessmentRate = value
				Me.SendPropertyChanged("AssessmentRate")
				Me.OnAssessmentRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowComplience", DbType:="Bit NOT NULL")>  _
	Public Property ShowComplience() As Boolean
		Get
			Return Me._ShowComplience
		End Get
		Set
			If ((Me._ShowComplience = value)  _
						= false) Then
				Me.OnShowComplienceChanging(value)
				Me.SendPropertyChanging
				Me._ShowComplience = value
				Me.SendPropertyChanged("ShowComplience")
				Me.OnShowComplienceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Complience", DbType:="NVarChar(MAX)")>  _
	Public Property Complience() As String
		Get
			Return Me._Complience
		End Get
		Set
			If (String.Equals(Me._Complience, value) = false) Then
				Me.OnComplienceChanging(value)
				Me.SendPropertyChanging
				Me._Complience = value
				Me.SendPropertyChanged("Complience")
				Me.OnComplienceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstBudgetPeriod", DbType:="TinyInt")>  _
	Public Property FirstBudgetPeriod() As System.Nullable(Of Byte)
		Get
			Return Me._FirstBudgetPeriod
		End Get
		Set
			If (Me._FirstBudgetPeriod.Equals(value) = false) Then
				Me.OnFirstBudgetPeriodChanging(value)
				Me.SendPropertyChanging
				Me._FirstBudgetPeriod = value
				Me.SendPropertyChanged("FirstBudgetPeriod")
				Me.OnFirstBudgetPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffTypes", DbType:="VarChar(100)")>  _
	Public Property StaffTypes() As String
		Get
			Return Me._StaffTypes
		End Get
		Set
			If (String.Equals(Me._StaffTypes, value) = false) Then
				Me.OnStaffTypesChanging(value)
				Me.SendPropertyChanging
				Me._StaffTypes = value
				Me.SendPropertyChanged("StaffTypes")
				Me.OnStaffTypesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Compensation", DbType:="NVarChar(MAX)")>  _
	Public Property Compensation() As String
		Get
			Return Me._Compensation
		End Get
		Set
			If (String.Equals(Me._Compensation, value) = false) Then
				Me.OnCompensationChanging(value)
				Me.SendPropertyChanging
				Me._Compensation = value
				Me.SendPropertyChanged("Compensation")
				Me.OnCompensationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Assessment", DbType:="NVarChar(MAX)")>  _
	Public Property Assessment() As String
		Get
			Return Me._Assessment
		End Get
		Set
			If (String.Equals(Me._Assessment, value) = false) Then
				Me.OnAssessmentChanging(value)
				Me.SendPropertyChanging
				Me._Assessment = value
				Me.SendPropertyChanged("Assessment")
				Me.OnAssessmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpd_Country", Storage:="_AP_mpd_Countries", ThisKey:="mpdDefId", OtherKey:="mpdDefId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property AP_mpd_Countries() As AP_mpd_Country
		Get
			Return Me._AP_mpd_Countries.Entity
		End Get
		Set
			Dim previousValue As AP_mpd_Country = Me._AP_mpd_Countries.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AP_mpd_Countries.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AP_mpd_Countries.Entity = Nothing
					previousValue.AP_mpdCalc_Definition = Nothing
				End If
				Me._AP_mpd_Countries.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.AP_mpdCalc_Definition = Me
				End If
				Me.SendPropertyChanged("AP_mpd_Countries")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AP_mpdCalc_Definition_AP_mpdCalc_StaffBudget", Storage:="_AP_mpdCalc_StaffBudgets", ThisKey:="mpdDefId", OtherKey:="DefinitionId")>  _
	Public Property AP_mpdCalc_StaffBudgets() As EntitySet(Of AP_mpdCalc_StaffBudget)
		Get
			Return Me._AP_mpdCalc_StaffBudgets
		End Get
		Set
			Me._AP_mpdCalc_StaffBudgets.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AP_mpdCalc_StaffBudgets(ByVal entity As AP_mpdCalc_StaffBudget)
		Me.SendPropertyChanging
		entity.AP_mpdCalc_Definition = Me
	End Sub
	
	Private Sub detach_AP_mpdCalc_StaffBudgets(ByVal entity As AP_mpdCalc_StaffBudget)
		Me.SendPropertyChanging
		entity.AP_mpdCalc_Definition = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ministry_systems")>  _
Partial Public Class ministry_system
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _min_code As String
	
	Private _min_name As String
	
	Private _min_logo As String
	
	Private _last_fin_rep As System.Nullable(Of Date)
	
	Private _gma_status As System.Nullable(Of Byte)
	
	Private _last_dataserver_donation As System.Nullable(Of Date)
	
	Private _iso2_code As String
	
	Private _gr_ministry_id As String
	
	Private _last_dataserver_transaction As System.Nullable(Of Date)
	
	Private _ministry_scope As String
	
	Private _area_code As String
	
	Private _area_name As String
	
	Private _is_active As System.Nullable(Of Boolean)
	
	Private _stage As Byte
	
	Private _fcx As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub Onmin_codeChanging(value As String)
    End Sub
    Partial Private Sub Onmin_codeChanged()
    End Sub
    Partial Private Sub Onmin_nameChanging(value As String)
    End Sub
    Partial Private Sub Onmin_nameChanged()
    End Sub
    Partial Private Sub Onmin_logoChanging(value As String)
    End Sub
    Partial Private Sub Onmin_logoChanged()
    End Sub
    Partial Private Sub Onlast_fin_repChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlast_fin_repChanged()
    End Sub
    Partial Private Sub Ongma_statusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub Ongma_statusChanged()
    End Sub
    Partial Private Sub Onlast_dataserver_donationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlast_dataserver_donationChanged()
    End Sub
    Partial Private Sub Oniso2_codeChanging(value As String)
    End Sub
    Partial Private Sub Oniso2_codeChanged()
    End Sub
    Partial Private Sub Ongr_ministry_idChanging(value As String)
    End Sub
    Partial Private Sub Ongr_ministry_idChanged()
    End Sub
    Partial Private Sub Onlast_dataserver_transactionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlast_dataserver_transactionChanged()
    End Sub
    Partial Private Sub Onministry_scopeChanging(value As String)
    End Sub
    Partial Private Sub Onministry_scopeChanged()
    End Sub
    Partial Private Sub Onarea_codeChanging(value As String)
    End Sub
    Partial Private Sub Onarea_codeChanged()
    End Sub
    Partial Private Sub Onarea_nameChanging(value As String)
    End Sub
    Partial Private Sub Onarea_nameChanged()
    End Sub
    Partial Private Sub Onis_activeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onis_activeChanged()
    End Sub
    Partial Private Sub OnstageChanging(value As Byte)
    End Sub
    Partial Private Sub OnstageChanged()
    End Sub
    Partial Private Sub OnfcxChanging(value As Boolean)
    End Sub
    Partial Private Sub OnfcxChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_min_code", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property min_code() As String
		Get
			Return Me._min_code
		End Get
		Set
			If (String.Equals(Me._min_code, value) = false) Then
				Me.Onmin_codeChanging(value)
				Me.SendPropertyChanging
				Me._min_code = value
				Me.SendPropertyChanged("min_code")
				Me.Onmin_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_min_name", DbType:="NVarChar(100)")>  _
	Public Property min_name() As String
		Get
			Return Me._min_name
		End Get
		Set
			If (String.Equals(Me._min_name, value) = false) Then
				Me.Onmin_nameChanging(value)
				Me.SendPropertyChanging
				Me._min_name = value
				Me.SendPropertyChanged("min_name")
				Me.Onmin_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_min_logo", DbType:="NVarChar(250)")>  _
	Public Property min_logo() As String
		Get
			Return Me._min_logo
		End Get
		Set
			If (String.Equals(Me._min_logo, value) = false) Then
				Me.Onmin_logoChanging(value)
				Me.SendPropertyChanging
				Me._min_logo = value
				Me.SendPropertyChanged("min_logo")
				Me.Onmin_logoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_fin_rep", DbType:="SmallDateTime")>  _
	Public Property last_fin_rep() As System.Nullable(Of Date)
		Get
			Return Me._last_fin_rep
		End Get
		Set
			If (Me._last_fin_rep.Equals(value) = false) Then
				Me.Onlast_fin_repChanging(value)
				Me.SendPropertyChanging
				Me._last_fin_rep = value
				Me.SendPropertyChanged("last_fin_rep")
				Me.Onlast_fin_repChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gma_status", DbType:="TinyInt")>  _
	Public Property gma_status() As System.Nullable(Of Byte)
		Get
			Return Me._gma_status
		End Get
		Set
			If (Me._gma_status.Equals(value) = false) Then
				Me.Ongma_statusChanging(value)
				Me.SendPropertyChanging
				Me._gma_status = value
				Me.SendPropertyChanged("gma_status")
				Me.Ongma_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_dataserver_donation", DbType:="SmallDateTime")>  _
	Public Property last_dataserver_donation() As System.Nullable(Of Date)
		Get
			Return Me._last_dataserver_donation
		End Get
		Set
			If (Me._last_dataserver_donation.Equals(value) = false) Then
				Me.Onlast_dataserver_donationChanging(value)
				Me.SendPropertyChanging
				Me._last_dataserver_donation = value
				Me.SendPropertyChanged("last_dataserver_donation")
				Me.Onlast_dataserver_donationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iso2_code", DbType:="NVarChar(2)")>  _
	Public Property iso2_code() As String
		Get
			Return Me._iso2_code
		End Get
		Set
			If (String.Equals(Me._iso2_code, value) = false) Then
				Me.Oniso2_codeChanging(value)
				Me.SendPropertyChanging
				Me._iso2_code = value
				Me.SendPropertyChanged("iso2_code")
				Me.Oniso2_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gr_ministry_id", DbType:="NVarChar(128)")>  _
	Public Property gr_ministry_id() As String
		Get
			Return Me._gr_ministry_id
		End Get
		Set
			If (String.Equals(Me._gr_ministry_id, value) = false) Then
				Me.Ongr_ministry_idChanging(value)
				Me.SendPropertyChanging
				Me._gr_ministry_id = value
				Me.SendPropertyChanged("gr_ministry_id")
				Me.Ongr_ministry_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_dataserver_transaction", DbType:="SmallDateTime")>  _
	Public Property last_dataserver_transaction() As System.Nullable(Of Date)
		Get
			Return Me._last_dataserver_transaction
		End Get
		Set
			If (Me._last_dataserver_transaction.Equals(value) = false) Then
				Me.Onlast_dataserver_transactionChanging(value)
				Me.SendPropertyChanging
				Me._last_dataserver_transaction = value
				Me.SendPropertyChanged("last_dataserver_transaction")
				Me.Onlast_dataserver_transactionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ministry_scope", DbType:="VarChar(20)")>  _
	Public Property ministry_scope() As String
		Get
			Return Me._ministry_scope
		End Get
		Set
			If (String.Equals(Me._ministry_scope, value) = false) Then
				Me.Onministry_scopeChanging(value)
				Me.SendPropertyChanging
				Me._ministry_scope = value
				Me.SendPropertyChanged("ministry_scope")
				Me.Onministry_scopeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_area_code", DbType:="VarChar(10)")>  _
	Public Property area_code() As String
		Get
			Return Me._area_code
		End Get
		Set
			If (String.Equals(Me._area_code, value) = false) Then
				Me.Onarea_codeChanging(value)
				Me.SendPropertyChanging
				Me._area_code = value
				Me.SendPropertyChanged("area_code")
				Me.Onarea_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_area_name", DbType:="NVarChar(30)")>  _
	Public Property area_name() As String
		Get
			Return Me._area_name
		End Get
		Set
			If (String.Equals(Me._area_name, value) = false) Then
				Me.Onarea_nameChanging(value)
				Me.SendPropertyChanging
				Me._area_name = value
				Me.SendPropertyChanged("area_name")
				Me.Onarea_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_active", DbType:="Bit")>  _
	Public Property is_active() As System.Nullable(Of Boolean)
		Get
			Return Me._is_active
		End Get
		Set
			If (Me._is_active.Equals(value) = false) Then
				Me.Onis_activeChanging(value)
				Me.SendPropertyChanging
				Me._is_active = value
				Me.SendPropertyChanged("is_active")
				Me.Onis_activeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stage", DbType:="TinyInt NOT NULL")>  _
	Public Property stage() As Byte
		Get
			Return Me._stage
		End Get
		Set
			If ((Me._stage = value)  _
						= false) Then
				Me.OnstageChanging(value)
				Me.SendPropertyChanging
				Me._stage = value
				Me.SendPropertyChanged("stage")
				Me.OnstageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fcx", DbType:="Bit NOT NULL")>  _
	Public Property fcx() As Boolean
		Get
			Return Me._fcx
		End Get
		Set
			If ((Me._fcx = value)  _
						= false) Then
				Me.OnfcxChanging(value)
				Me.SendPropertyChanging
				Me._fcx = value
				Me.SendPropertyChanged("fcx")
				Me.OnfcxChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.gr_mapping")>  _
Partial Public Class gr_mapping
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _LocalName As String
	
	Private _gr_dot_notated_name As String
	
	Private _FieldType As String
	
	Private _PortalId As Integer
	
	Private _LocalSource As String
	
	Private _can_be_updated As Boolean
	
	Private _replace As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnLocalNameChanging(value As String)
    End Sub
    Partial Private Sub OnLocalNameChanged()
    End Sub
    Partial Private Sub Ongr_dot_notated_nameChanging(value As String)
    End Sub
    Partial Private Sub Ongr_dot_notated_nameChanged()
    End Sub
    Partial Private Sub OnFieldTypeChanging(value As String)
    End Sub
    Partial Private Sub OnFieldTypeChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    Partial Private Sub OnLocalSourceChanging(value As String)
    End Sub
    Partial Private Sub OnLocalSourceChanged()
    End Sub
    Partial Private Sub Oncan_be_updatedChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncan_be_updatedChanged()
    End Sub
    Partial Private Sub OnreplaceChanging(value As String)
    End Sub
    Partial Private Sub OnreplaceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LocalName() As String
		Get
			Return Me._LocalName
		End Get
		Set
			If (String.Equals(Me._LocalName, value) = false) Then
				Me.OnLocalNameChanging(value)
				Me.SendPropertyChanging
				Me._LocalName = value
				Me.SendPropertyChanged("LocalName")
				Me.OnLocalNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gr_dot_notated_name", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property gr_dot_notated_name() As String
		Get
			Return Me._gr_dot_notated_name
		End Get
		Set
			If (String.Equals(Me._gr_dot_notated_name, value) = false) Then
				Me.Ongr_dot_notated_nameChanging(value)
				Me.SendPropertyChanging
				Me._gr_dot_notated_name = value
				Me.SendPropertyChanged("gr_dot_notated_name")
				Me.Ongr_dot_notated_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldType", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property FieldType() As String
		Get
			Return Me._FieldType
		End Get
		Set
			If (String.Equals(Me._FieldType, value) = false) Then
				Me.OnFieldTypeChanging(value)
				Me.SendPropertyChanging
				Me._FieldType = value
				Me.SendPropertyChanged("FieldType")
				Me.OnFieldTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int NOT NULL")>  _
	Public Property PortalId() As Integer
		Get
			Return Me._PortalId
		End Get
		Set
			If ((Me._PortalId = value)  _
						= false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalSource", DbType:="VarChar(2) NOT NULL", CanBeNull:=false)>  _
	Public Property LocalSource() As String
		Get
			Return Me._LocalSource
		End Get
		Set
			If (String.Equals(Me._LocalSource, value) = false) Then
				Me.OnLocalSourceChanging(value)
				Me.SendPropertyChanging
				Me._LocalSource = value
				Me.SendPropertyChanged("LocalSource")
				Me.OnLocalSourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_can_be_updated", DbType:="Bit NOT NULL")>  _
	Public Property can_be_updated() As Boolean
		Get
			Return Me._can_be_updated
		End Get
		Set
			If ((Me._can_be_updated = value)  _
						= false) Then
				Me.Oncan_be_updatedChanging(value)
				Me.SendPropertyChanging
				Me._can_be_updated = value
				Me.SendPropertyChanged("can_be_updated")
				Me.Oncan_be_updatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_replace", DbType:="NVarChar(MAX)")>  _
	Public Property replace() As String
		Get
			Return Me._replace
		End Get
		Set
			If (String.Equals(Me._replace, value) = false) Then
				Me.OnreplaceChanging(value)
				Me.SendPropertyChanging
				Me._replace = value
				Me.SendPropertyChanged("replace")
				Me.OnreplaceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AP_mpd_UserAccountInfo")>  _
Partial Public Class AP_mpd_UserAccountInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _mpdUserAccountInfo As Long
	
	Private _mpdCountryId As Integer
	
	Private _staffId As System.Nullable(Of Integer)
	
	Private _period As String
	
	Private _income As Decimal
	
	Private _expense As Decimal
	
	Private _balance As Decimal
	
	Private _foreignIncome As Decimal
	
	Private _compensation As Decimal
	
	Private _mpdUserId As System.Nullable(Of Long)
	
	Private _expBudget As Decimal
	
	Private _toRaiseBudget As Decimal
	
	Private _Ap_mpd_User As EntityRef(Of Ap_mpd_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmpdUserAccountInfoChanging(value As Long)
    End Sub
    Partial Private Sub OnmpdUserAccountInfoChanged()
    End Sub
    Partial Private Sub OnmpdCountryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmpdCountryIdChanged()
    End Sub
    Partial Private Sub OnstaffIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstaffIdChanged()
    End Sub
    Partial Private Sub OnperiodChanging(value As String)
    End Sub
    Partial Private Sub OnperiodChanged()
    End Sub
    Partial Private Sub OnincomeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnincomeChanged()
    End Sub
    Partial Private Sub OnexpenseChanging(value As Decimal)
    End Sub
    Partial Private Sub OnexpenseChanged()
    End Sub
    Partial Private Sub OnbalanceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnbalanceChanged()
    End Sub
    Partial Private Sub OnforeignIncomeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnforeignIncomeChanged()
    End Sub
    Partial Private Sub OncompensationChanging(value As Decimal)
    End Sub
    Partial Private Sub OncompensationChanged()
    End Sub
    Partial Private Sub OnmpdUserIdChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnmpdUserIdChanged()
    End Sub
    Partial Private Sub OnexpBudgetChanging(value As Decimal)
    End Sub
    Partial Private Sub OnexpBudgetChanged()
    End Sub
    Partial Private Sub OntoRaiseBudgetChanging(value As Decimal)
    End Sub
    Partial Private Sub OntoRaiseBudgetChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ap_mpd_User = CType(Nothing, EntityRef(Of Ap_mpd_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdUserAccountInfo", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property mpdUserAccountInfo() As Long
		Get
			Return Me._mpdUserAccountInfo
		End Get
		Set
			If ((Me._mpdUserAccountInfo = value)  _
						= false) Then
				Me.OnmpdUserAccountInfoChanging(value)
				Me.SendPropertyChanging
				Me._mpdUserAccountInfo = value
				Me.SendPropertyChanged("mpdUserAccountInfo")
				Me.OnmpdUserAccountInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdCountryId", DbType:="Int NOT NULL")>  _
	Public Property mpdCountryId() As Integer
		Get
			Return Me._mpdCountryId
		End Get
		Set
			If ((Me._mpdCountryId = value)  _
						= false) Then
				Me.OnmpdCountryIdChanging(value)
				Me.SendPropertyChanging
				Me._mpdCountryId = value
				Me.SendPropertyChanged("mpdCountryId")
				Me.OnmpdCountryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffId", DbType:="Int")>  _
	Public Property staffId() As System.Nullable(Of Integer)
		Get
			Return Me._staffId
		End Get
		Set
			If (Me._staffId.Equals(value) = false) Then
				Me.OnstaffIdChanging(value)
				Me.SendPropertyChanging
				Me._staffId = value
				Me.SendPropertyChanged("staffId")
				Me.OnstaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_period", DbType:="Char(7) NOT NULL", CanBeNull:=false)>  _
	Public Property period() As String
		Get
			Return Me._period
		End Get
		Set
			If (String.Equals(Me._period, value) = false) Then
				Me.OnperiodChanging(value)
				Me.SendPropertyChanging
				Me._period = value
				Me.SendPropertyChanged("period")
				Me.OnperiodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_income", DbType:="Money NOT NULL")>  _
	Public Property income() As Decimal
		Get
			Return Me._income
		End Get
		Set
			If ((Me._income = value)  _
						= false) Then
				Me.OnincomeChanging(value)
				Me.SendPropertyChanging
				Me._income = value
				Me.SendPropertyChanged("income")
				Me.OnincomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expense", DbType:="Money NOT NULL")>  _
	Public Property expense() As Decimal
		Get
			Return Me._expense
		End Get
		Set
			If ((Me._expense = value)  _
						= false) Then
				Me.OnexpenseChanging(value)
				Me.SendPropertyChanging
				Me._expense = value
				Me.SendPropertyChanged("expense")
				Me.OnexpenseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_balance", DbType:="Money NOT NULL")>  _
	Public Property balance() As Decimal
		Get
			Return Me._balance
		End Get
		Set
			If ((Me._balance = value)  _
						= false) Then
				Me.OnbalanceChanging(value)
				Me.SendPropertyChanging
				Me._balance = value
				Me.SendPropertyChanged("balance")
				Me.OnbalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foreignIncome", DbType:="Money NOT NULL")>  _
	Public Property foreignIncome() As Decimal
		Get
			Return Me._foreignIncome
		End Get
		Set
			If ((Me._foreignIncome = value)  _
						= false) Then
				Me.OnforeignIncomeChanging(value)
				Me.SendPropertyChanging
				Me._foreignIncome = value
				Me.SendPropertyChanged("foreignIncome")
				Me.OnforeignIncomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_compensation", DbType:="Money NOT NULL")>  _
	Public Property compensation() As Decimal
		Get
			Return Me._compensation
		End Get
		Set
			If ((Me._compensation = value)  _
						= false) Then
				Me.OncompensationChanging(value)
				Me.SendPropertyChanging
				Me._compensation = value
				Me.SendPropertyChanged("compensation")
				Me.OncompensationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mpdUserId", DbType:="BigInt")>  _
	Public Property mpdUserId() As System.Nullable(Of Long)
		Get
			Return Me._mpdUserId
		End Get
		Set
			If (Me._mpdUserId.Equals(value) = false) Then
				If Me._Ap_mpd_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnmpdUserIdChanging(value)
				Me.SendPropertyChanging
				Me._mpdUserId = value
				Me.SendPropertyChanged("mpdUserId")
				Me.OnmpdUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expBudget", DbType:="Money NOT NULL")>  _
	Public Property expBudget() As Decimal
		Get
			Return Me._expBudget
		End Get
		Set
			If ((Me._expBudget = value)  _
						= false) Then
				Me.OnexpBudgetChanging(value)
				Me.SendPropertyChanging
				Me._expBudget = value
				Me.SendPropertyChanged("expBudget")
				Me.OnexpBudgetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_toRaiseBudget", DbType:="Money NOT NULL")>  _
	Public Property toRaiseBudget() As Decimal
		Get
			Return Me._toRaiseBudget
		End Get
		Set
			If ((Me._toRaiseBudget = value)  _
						= false) Then
				Me.OntoRaiseBudgetChanging(value)
				Me.SendPropertyChanging
				Me._toRaiseBudget = value
				Me.SendPropertyChanged("toRaiseBudget")
				Me.OntoRaiseBudgetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ap_mpd_User_AP_mpd_UserAccountInfo", Storage:="_Ap_mpd_User", ThisKey:="mpdUserId", OtherKey:="AP_mpd_UserId", IsForeignKey:=true)>  _
	Public Property Ap_mpd_User() As Ap_mpd_User
		Get
			Return Me._Ap_mpd_User.Entity
		End Get
		Set
			Dim previousValue As Ap_mpd_User = Me._Ap_mpd_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ap_mpd_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ap_mpd_User.Entity = Nothing
					previousValue.AP_mpd_UserAccountInfos.Remove(Me)
				End If
				Me._Ap_mpd_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AP_mpd_UserAccountInfos.Add(Me)
					Me._mpdUserId = value.AP_mpd_UserId
				Else
					Me._mpdUserId = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Ap_mpd_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
